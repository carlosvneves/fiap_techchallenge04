Beginning AutoGluon training... Time limit = 600s
AutoGluon will save models to 'autogluon-petr-mult'
=================== System Info ===================
AutoGluon Version:  1.1.1
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.22635
CPU Count:          16
GPU Count:          0
Memory Avail:       16.97 GB / 31.74 GB (53.5%)
Disk Space Avail:   217.50 GB / 930.09 GB (23.4%)
===================================================
Setting presets to: chronos_large_ensemble

Fitting with arguments:
{'enable_ensemble': True,
 'eval_metric': WQL,
 'hyperparameters': {'Chronos': {'batch_size': 8, 'model_path': 'large'},
                     'DirectTabular': {},
                     'PatchTST': {},
                     'RecursiveTabular': {},
                     'SeasonalNaive': {},
                     'TemporalFusionTransformer': {}},
 'known_covariates_names': ['hour',
                            'dayofweek',
                            'quarter',
                            'month',
                            'year',
                            'dayofyear'],
 'num_val_windows': 5,
 'prediction_length': 550,
 'quantile_levels': [0.1, 0.5, 0.75, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'VALUE (US$)',
 'time_limit': 600,
 'verbosity': 2}

Inferred time series frequency: 'D'
Provided train_data has 8012 rows, 1 time series. Median time series length is 8012 (min=8012, max=8012). 
Warning: path already exists! This predictor may overwrite an existing predictor! path="autogluon-petr-mult"
Beginning AutoGluon training... Time limit = 600s
Beginning AutoGluon training... Time limit = 600s
AutoGluon will save models to 'autogluon-petr-mult'
AutoGluon will save models to 'autogluon-petr-mult'
=================== System Info ===================
AutoGluon Version:  1.1.1
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.22635
CPU Count:          16
GPU Count:          0
Memory Avail:       16.82 GB / 31.74 GB (53.0%)
Disk Space Avail:   217.49 GB / 930.09 GB (23.4%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.1.1
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.22635
CPU Count:          16
GPU Count:          0
Memory Avail:       16.82 GB / 31.74 GB (53.0%)
Disk Space Avail:   217.49 GB / 930.09 GB (23.4%)
===================================================
Setting presets to: chronos_large_ensemble
Setting presets to: chronos_large_ensemble

Fitting with arguments:

Fitting with arguments:
{'enable_ensemble': True,
 'eval_metric': WQL,
 'hyperparameters': {'Chronos': {'batch_size': 8, 'model_path': 'large'},
                     'DirectTabular': {},
                     'PatchTST': {},
                     'RecursiveTabular': {},
                     'SeasonalNaive': {},
                     'TemporalFusionTransformer': {}},
 'known_covariates_names': ['hour',
                            'dayofweek',
                            'quarter',
                            'month',
                            'year',
                            'dayofyear'],
 'num_val_windows': 5,
 'prediction_length': 550,
 'quantile_levels': [0.1, 0.5, 0.75, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'VALUE (US$)',
 'time_limit': 600,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'hyperparameters': {'Chronos': {'batch_size': 8, 'model_path': 'large'},
                     'DirectTabular': {},
                     'PatchTST': {},
                     'RecursiveTabular': {},
                     'SeasonalNaive': {},
                     'TemporalFusionTransformer': {}},
 'known_covariates_names': ['hour',
                            'dayofweek',
                            'quarter',
                            'month',
                            'year',
                            'dayofyear'],
 'num_val_windows': 5,
 'prediction_length': 550,
 'quantile_levels': [0.1, 0.5, 0.75, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'VALUE (US$)',
 'time_limit': 600,
 'verbosity': 2}

Inferred time series frequency: 'D'
Inferred time series frequency: 'D'
Provided train_data has 8012 rows, 1 time series. Median time series length is 8012 (min=8012, max=8012). 
Provided train_data has 8012 rows, 1 time series. Median time series length is 8012 (min=8012, max=8012). 
Beginning AutoGluon training... Time limit = 600s
Beginning AutoGluon training... Time limit = 600s
AutoGluon will save models to 'autogluon-petr-mult'
AutoGluon will save models to 'autogluon-petr-mult'
=================== System Info ===================
AutoGluon Version:  1.1.1
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.22635
CPU Count:          16
GPU Count:          0
Memory Avail:       16.75 GB / 31.74 GB (52.8%)
Disk Space Avail:   217.49 GB / 930.09 GB (23.4%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.1.1
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.22635
CPU Count:          16
GPU Count:          0
Memory Avail:       16.75 GB / 31.74 GB (52.8%)
Disk Space Avail:   217.49 GB / 930.09 GB (23.4%)
===================================================
Setting presets to: chronos_large_ensemble
Setting presets to: chronos_large_ensemble

Fitting with arguments:

Fitting with arguments:
{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'D',
 'hyperparameters': {'Chronos': {'batch_size': 8, 'model_path': 'large'},
                     'DirectTabular': {},
                     'PatchTST': {},
                     'RecursiveTabular': {},
                     'SeasonalNaive': {},
                     'TemporalFusionTransformer': {}},
 'known_covariates_names': ['hour',
                            'dayofweek',
                            'quarter',
                            'month',
                            'year',
                            'dayofyear'],
 'num_val_windows': 5,
 'prediction_length': 550,
 'quantile_levels': [0.1, 0.5, 0.75, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'VALUE (US$)',
 'time_limit': 600,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'D',
 'hyperparameters': {'Chronos': {'batch_size': 8, 'model_path': 'large'},
                     'DirectTabular': {},
                     'PatchTST': {},
                     'RecursiveTabular': {},
                     'SeasonalNaive': {},
                     'TemporalFusionTransformer': {}},
 'known_covariates_names': ['hour',
                            'dayofweek',
                            'quarter',
                            'month',
                            'year',
                            'dayofyear'],
 'num_val_windows': 5,
 'prediction_length': 550,
 'quantile_levels': [0.1, 0.5, 0.75, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'VALUE (US$)',
 'time_limit': 600,
 'verbosity': 2}

Provided train_data has 8012 rows, 1 time series. Median time series length is 8012 (min=8012, max=8012). 
Provided train_data has 8012 rows, 1 time series. Median time series length is 8012 (min=8012, max=8012). 

Provided data contains following columns:

Provided data contains following columns:
	target: 'VALUE (US$)'
	target: 'VALUE (US$)'
	known_covariates:
	known_covariates:
		categorical:        []
		categorical:        []
		continuous (float): ['hour', 'dayofweek', 'quarter', 'month', 'year', 'dayofyear']
		continuous (float): ['hour', 'dayofweek', 'quarter', 'month', 'year', 'dayofyear']

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
===================================================
===================================================

Starting training. Start time is 2024-06-29 21:09:40

Starting training. Start time is 2024-06-29 21:09:40
Models that will be trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'Chronos[large]', 'TemporalFusionTransformer', 'PatchTST']
Models that will be trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'Chronos[large]', 'TemporalFusionTransformer', 'PatchTST']
Training timeseries model SeasonalNaive. Training for up to 85.6s of the 599.2s of remaining time.
Training timeseries model SeasonalNaive. Training for up to 85.6s of the 599.2s of remaining time.
	-0.1740       = Validation score (-WQL)
	-0.1740       = Validation score (-WQL)
	10.28   s     = Training runtime
	10.28   s     = Training runtime
	2.40    s     = Validation (prediction) runtime
	2.40    s     = Validation (prediction) runtime
Training timeseries model RecursiveTabular. Training for up to 97.7s of the 586.5s of remaining time.
Training timeseries model RecursiveTabular. Training for up to 97.7s of the 586.5s of remaining time.
	-0.2006       = Validation score (-WQL)
	-0.2006       = Validation score (-WQL)
	75.54   s     = Training runtime
	75.54   s     = Training runtime
	8.40    s     = Validation (prediction) runtime
	8.40    s     = Validation (prediction) runtime
Training timeseries model DirectTabular. Training for up to 100.5s of the 502.5s of remaining time.
Training timeseries model DirectTabular. Training for up to 100.5s of the 502.5s of remaining time.
	-0.2882       = Validation score (-WQL)
	-0.2882       = Validation score (-WQL)
	56.25   s     = Training runtime
	56.25   s     = Training runtime
	0.36    s     = Validation (prediction) runtime
	0.36    s     = Validation (prediction) runtime
Training timeseries model Chronos[large]. Training for up to 111.5s of the 445.9s of remaining time.
Training timeseries model Chronos[large]. Training for up to 111.5s of the 445.9s of remaining time.
	Warning: Exception caused Chronos[large] to fail during training... Skipping this model.
	Warning: Exception caused Chronos[large] to fail during training... Skipping this model.
	Chronos[large]\W0 requires a GPU to run, but no GPU was detected. Please make sure that you are using a computer with a CUDA-compatible GPU and `import torch; torch.cuda.is_available()` returns `True`.
	Chronos[large]\W0 requires a GPU to run, but no GPU was detected. Please make sure that you are using a computer with a CUDA-compatible GPU and `import torch; torch.cuda.is_available()` returns `True`.
Training timeseries model TemporalFusionTransformer. Training for up to 147.2s of the 441.5s of remaining time.
Training timeseries model TemporalFusionTransformer. Training for up to 147.2s of the 441.5s of remaining time.
	Time limit exceeded... Skipping TemporalFusionTransformer.
	Time limit exceeded... Skipping TemporalFusionTransformer.
Stopping training due to lack of time remaining. Time left: -4227.8 seconds
Stopping training due to lack of time remaining. Time left: -4227.8 seconds
Not fitting ensemble due to lack of time remaining. Time left: -4227.8 seconds
Not fitting ensemble due to lack of time remaining. Time left: -4227.8 seconds
Training complete. Models trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular']
Training complete. Models trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular']
Total runtime: 4827.75 s
Total runtime: 4827.75 s
Best model: SeasonalNaive
Best model: SeasonalNaive
Best model score: -0.1740
Best model score: -0.1740
