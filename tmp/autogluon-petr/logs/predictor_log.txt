Beginning AutoGluon training... Time limit = 600s
AutoGluon will save models to 'autogluon-petr'
=================== System Info ===================
AutoGluon Version:  1.1.1
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.22635
CPU Count:          16
GPU Count:          0
Memory Avail:       14.86 GB / 31.74 GB (46.8%)
Disk Space Avail:   211.05 GB / 930.09 GB (22.7%)
===================================================
Setting presets to: medium_quality

Fitting with arguments:
{'enable_ensemble': True,
 'eval_metric': MASE,
 'hyperparameters': 'light',
 'known_covariates_names': [],
 'num_val_windows': 1,
 'prediction_length': 1562,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'VALUE (US$)',
 'time_limit': 600,
 'verbosity': 2}

Inferred time series frequency: 'D'
Provided train_data has 7000 rows, 1 time series. Median time series length is 7000 (min=7000, max=7000). 

Provided data contains following columns:
	target: 'VALUE (US$)'

AutoGluon will gauge predictive performance using evaluation metric: 'MASE'
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
===================================================

Starting training. Start time is 2024-06-29 17:14:37
Models that will be trained: ['Naive', 'SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'ETS', 'Theta', 'TemporalFusionTransformer']
Training timeseries model Naive. Training for up to 74.6s of the 596.5s of remaining time.
	-7.7194       = Validation score (-MASE)
	0.02    s     = Training runtime
	3.29    s     = Validation (prediction) runtime
Training timeseries model SeasonalNaive. Training for up to 84.7s of the 593.2s of remaining time.
	-7.3171       = Validation score (-MASE)
	0.03    s     = Training runtime
	2.96    s     = Validation (prediction) runtime
Training timeseries model RecursiveTabular. Training for up to 98.4s of the 590.2s of remaining time.
	-23.5138      = Validation score (-MASE)
	5.44    s     = Training runtime
	25.55   s     = Validation (prediction) runtime
Training timeseries model DirectTabular. Training for up to 111.8s of the 559.2s of remaining time.
	-12.5745      = Validation score (-MASE)
	1.83    s     = Training runtime
	0.25    s     = Validation (prediction) runtime
Training timeseries model ETS. Training for up to 139.3s of the 557.1s of remaining time.
	-7.7584       = Validation score (-MASE)
	0.04    s     = Training runtime
	43.40   s     = Validation (prediction) runtime
Training timeseries model Theta. Training for up to 171.2s of the 513.6s of remaining time.
	-8.7568       = Validation score (-MASE)
	0.03    s     = Training runtime
	46.12   s     = Validation (prediction) runtime
Training timeseries model TemporalFusionTransformer. Training for up to 233.7s of the 467.5s of remaining time.
	-12.9549      = Validation score (-MASE)
	220.11  s     = Training runtime
	0.22    s     = Validation (prediction) runtime
Fitting simple weighted ensemble.
	Ensemble weights: {'Naive': 0.02, 'RecursiveTabular': 0.26, 'SeasonalNaive': 0.04, 'TemporalFusionTransformer': 0.01, 'Theta': 0.67}
	-2.3282       = Validation score (-MASE)
	0.68    s     = Training runtime
	78.13   s     = Validation (prediction) runtime
Training complete. Models trained: ['Naive', 'SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'ETS', 'Theta', 'TemporalFusionTransformer', 'WeightedEnsemble']
Total runtime: 351.20 s
Best model: WeightedEnsemble
Best model score: -2.3282
Model not specified in predict, will default to the model with the best validation score: WeightedEnsemble
Beginning AutoGluon training... Time limit = 600s
Beginning AutoGluon training... Time limit = 600s
Beginning AutoGluon training... Time limit = 600s
AutoGluon will save models to 'autogluon-petr'
AutoGluon will save models to 'autogluon-petr'
AutoGluon will save models to 'autogluon-petr'
=================== System Info ===================
AutoGluon Version:  1.1.1
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.22635
CPU Count:          16
GPU Count:          0
Memory Avail:       16.71 GB / 31.74 GB (52.7%)
Disk Space Avail:   211.03 GB / 930.09 GB (22.7%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.1.1
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.22635
CPU Count:          16
GPU Count:          0
Memory Avail:       16.71 GB / 31.74 GB (52.7%)
Disk Space Avail:   211.03 GB / 930.09 GB (22.7%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.1.1
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.22635
CPU Count:          16
GPU Count:          0
Memory Avail:       16.71 GB / 31.74 GB (52.7%)
Disk Space Avail:   211.03 GB / 930.09 GB (22.7%)
===================================================
Setting presets to: medium_quality
Setting presets to: medium_quality
Setting presets to: medium_quality

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:
{'enable_ensemble': True,
 'eval_metric': MASE,
 'hyperparameters': 'light',
 'known_covariates_names': [],
 'num_val_windows': 1,
 'prediction_length': 1061,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'VALUE (US$)',
 'time_limit': 600,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': MASE,
 'hyperparameters': 'light',
 'known_covariates_names': [],
 'num_val_windows': 1,
 'prediction_length': 1061,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'VALUE (US$)',
 'time_limit': 600,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': MASE,
 'hyperparameters': 'light',
 'known_covariates_names': [],
 'num_val_windows': 1,
 'prediction_length': 1061,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'VALUE (US$)',
 'time_limit': 600,
 'verbosity': 2}

Inferred time series frequency: 'D'
Inferred time series frequency: 'D'
Inferred time series frequency: 'D'
Provided train_data has 7500 rows, 1 time series. Median time series length is 7500 (min=7500, max=7500). 
Provided train_data has 7500 rows, 1 time series. Median time series length is 7500 (min=7500, max=7500). 
Provided train_data has 7500 rows, 1 time series. Median time series length is 7500 (min=7500, max=7500). 

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:
	target: 'VALUE (US$)'
	target: 'VALUE (US$)'
	target: 'VALUE (US$)'

AutoGluon will gauge predictive performance using evaluation metric: 'MASE'

AutoGluon will gauge predictive performance using evaluation metric: 'MASE'

AutoGluon will gauge predictive performance using evaluation metric: 'MASE'
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
===================================================
===================================================
===================================================

Starting training. Start time is 2024-06-29 17:34:11

Starting training. Start time is 2024-06-29 17:34:11

Starting training. Start time is 2024-06-29 17:34:11
Models that will be trained: ['Naive', 'SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'ETS', 'Theta', 'TemporalFusionTransformer']
Models that will be trained: ['Naive', 'SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'ETS', 'Theta', 'TemporalFusionTransformer']
Models that will be trained: ['Naive', 'SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'ETS', 'Theta', 'TemporalFusionTransformer']
Training timeseries model Naive. Training for up to 75.0s of the 600.0s of remaining time.
Training timeseries model Naive. Training for up to 75.0s of the 600.0s of remaining time.
Training timeseries model Naive. Training for up to 75.0s of the 600.0s of remaining time.
	-6.4268       = Validation score (-MASE)
	-6.4268       = Validation score (-MASE)
	-6.4268       = Validation score (-MASE)
	0.01    s     = Training runtime
	0.01    s     = Training runtime
	0.01    s     = Training runtime
	3.47    s     = Validation (prediction) runtime
	3.47    s     = Validation (prediction) runtime
	3.47    s     = Validation (prediction) runtime
Training timeseries model SeasonalNaive. Training for up to 85.2s of the 596.5s of remaining time.
Training timeseries model SeasonalNaive. Training for up to 85.2s of the 596.5s of remaining time.
Training timeseries model SeasonalNaive. Training for up to 85.2s of the 596.5s of remaining time.
	-6.4131       = Validation score (-MASE)
	-6.4131       = Validation score (-MASE)
	-6.4131       = Validation score (-MASE)
	0.03    s     = Training runtime
	0.03    s     = Training runtime
	0.03    s     = Training runtime
	2.49    s     = Validation (prediction) runtime
	2.49    s     = Validation (prediction) runtime
	2.49    s     = Validation (prediction) runtime
Training timeseries model RecursiveTabular. Training for up to 99.0s of the 593.9s of remaining time.
Training timeseries model RecursiveTabular. Training for up to 99.0s of the 593.9s of remaining time.
Training timeseries model RecursiveTabular. Training for up to 99.0s of the 593.9s of remaining time.
	-5.2597       = Validation score (-MASE)
	-5.2597       = Validation score (-MASE)
	-5.2597       = Validation score (-MASE)
	3.00    s     = Training runtime
	3.00    s     = Training runtime
	3.00    s     = Training runtime
	23.50   s     = Validation (prediction) runtime
	23.50   s     = Validation (prediction) runtime
	23.50   s     = Validation (prediction) runtime
Training timeseries model DirectTabular. Training for up to 113.5s of the 567.4s of remaining time.
Training timeseries model DirectTabular. Training for up to 113.5s of the 567.4s of remaining time.
Training timeseries model DirectTabular. Training for up to 113.5s of the 567.4s of remaining time.
	-6.4549       = Validation score (-MASE)
	-6.4549       = Validation score (-MASE)
	-6.4549       = Validation score (-MASE)
	1.50    s     = Training runtime
	1.50    s     = Training runtime
	1.50    s     = Training runtime
	0.21    s     = Validation (prediction) runtime
	0.21    s     = Validation (prediction) runtime
	0.21    s     = Validation (prediction) runtime
Training timeseries model ETS. Training for up to 141.4s of the 565.7s of remaining time.
Training timeseries model ETS. Training for up to 141.4s of the 565.7s of remaining time.
Training timeseries model ETS. Training for up to 141.4s of the 565.7s of remaining time.
	-6.3336       = Validation score (-MASE)
	-6.3336       = Validation score (-MASE)
	-6.3336       = Validation score (-MASE)
	0.02    s     = Training runtime
	0.02    s     = Training runtime
	0.02    s     = Training runtime
	35.41   s     = Validation (prediction) runtime
	35.41   s     = Validation (prediction) runtime
	35.41   s     = Validation (prediction) runtime
Training timeseries model Theta. Training for up to 176.7s of the 530.2s of remaining time.
Training timeseries model Theta. Training for up to 176.7s of the 530.2s of remaining time.
Training timeseries model Theta. Training for up to 176.7s of the 530.2s of remaining time.
	-5.2646       = Validation score (-MASE)
	-5.2646       = Validation score (-MASE)
	-5.2646       = Validation score (-MASE)
	0.03    s     = Training runtime
	0.03    s     = Training runtime
	0.03    s     = Training runtime
	38.25   s     = Validation (prediction) runtime
	38.25   s     = Validation (prediction) runtime
	38.25   s     = Validation (prediction) runtime
Training timeseries model TemporalFusionTransformer. Training for up to 246.0s of the 491.9s of remaining time.
Training timeseries model TemporalFusionTransformer. Training for up to 246.0s of the 491.9s of remaining time.
Training timeseries model TemporalFusionTransformer. Training for up to 246.0s of the 491.9s of remaining time.
	-5.3986       = Validation score (-MASE)
	-5.3986       = Validation score (-MASE)
	-5.3986       = Validation score (-MASE)
	222.53  s     = Training runtime
	222.53  s     = Training runtime
	222.53  s     = Training runtime
	0.16    s     = Validation (prediction) runtime
	0.16    s     = Validation (prediction) runtime
	0.16    s     = Validation (prediction) runtime
Fitting simple weighted ensemble.
Fitting simple weighted ensemble.
Fitting simple weighted ensemble.
	Ensemble weights: {'RecursiveTabular': 0.42, 'Theta': 0.58}
	Ensemble weights: {'RecursiveTabular': 0.42, 'Theta': 0.58}
	Ensemble weights: {'RecursiveTabular': 0.42, 'Theta': 0.58}
	-5.2149       = Validation score (-MASE)
	-5.2149       = Validation score (-MASE)
	-5.2149       = Validation score (-MASE)
	0.66    s     = Training runtime
	0.66    s     = Training runtime
	0.66    s     = Training runtime
	61.76   s     = Validation (prediction) runtime
	61.76   s     = Validation (prediction) runtime
	61.76   s     = Validation (prediction) runtime
Training complete. Models trained: ['Naive', 'SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'ETS', 'Theta', 'TemporalFusionTransformer', 'WeightedEnsemble']
Training complete. Models trained: ['Naive', 'SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'ETS', 'Theta', 'TemporalFusionTransformer', 'WeightedEnsemble']
Training complete. Models trained: ['Naive', 'SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'ETS', 'Theta', 'TemporalFusionTransformer', 'WeightedEnsemble']
Total runtime: 331.44 s
Total runtime: 331.44 s
Total runtime: 331.44 s
Best model: WeightedEnsemble
Best model: WeightedEnsemble
Best model: WeightedEnsemble
Best model score: -5.2149
Best model score: -5.2149
Best model score: -5.2149
Model not specified in predict, will default to the model with the best validation score: WeightedEnsemble
Model not specified in predict, will default to the model with the best validation score: WeightedEnsemble
Model not specified in predict, will default to the model with the best validation score: WeightedEnsemble
Beginning AutoGluon training... Time limit = 600s
Beginning AutoGluon training... Time limit = 600s
Beginning AutoGluon training... Time limit = 600s
Beginning AutoGluon training... Time limit = 600s
AutoGluon will save models to 'autogluon-petr'
AutoGluon will save models to 'autogluon-petr'
AutoGluon will save models to 'autogluon-petr'
AutoGluon will save models to 'autogluon-petr'
=================== System Info ===================
AutoGluon Version:  1.1.1
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.22635
CPU Count:          16
GPU Count:          0
Memory Avail:       16.84 GB / 31.74 GB (53.1%)
Disk Space Avail:   209.71 GB / 930.09 GB (22.5%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.1.1
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.22635
CPU Count:          16
GPU Count:          0
Memory Avail:       16.84 GB / 31.74 GB (53.1%)
Disk Space Avail:   209.71 GB / 930.09 GB (22.5%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.1.1
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.22635
CPU Count:          16
GPU Count:          0
Memory Avail:       16.84 GB / 31.74 GB (53.1%)
Disk Space Avail:   209.71 GB / 930.09 GB (22.5%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.1.1
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.22635
CPU Count:          16
GPU Count:          0
Memory Avail:       16.84 GB / 31.74 GB (53.1%)
Disk Space Avail:   209.71 GB / 930.09 GB (22.5%)
===================================================
Setting presets to: best_quality
Setting presets to: best_quality
Setting presets to: best_quality
Setting presets to: best_quality

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:
{'enable_ensemble': True,
 'eval_metric': MASE,
 'hyperparameters': 'default',
 'known_covariates_names': [],
 'num_val_windows': 3,
 'prediction_length': 1061,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'VALUE (US$)',
 'time_limit': 600,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': MASE,
 'hyperparameters': 'default',
 'known_covariates_names': [],
 'num_val_windows': 3,
 'prediction_length': 1061,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'VALUE (US$)',
 'time_limit': 600,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': MASE,
 'hyperparameters': 'default',
 'known_covariates_names': [],
 'num_val_windows': 3,
 'prediction_length': 1061,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'VALUE (US$)',
 'time_limit': 600,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': MASE,
 'hyperparameters': 'default',
 'known_covariates_names': [],
 'num_val_windows': 3,
 'prediction_length': 1061,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'VALUE (US$)',
 'time_limit': 600,
 'verbosity': 2}

Inferred time series frequency: 'D'
Inferred time series frequency: 'D'
Inferred time series frequency: 'D'
Inferred time series frequency: 'D'
Provided train_data has 7500 rows, 1 time series. Median time series length is 7500 (min=7500, max=7500). 
Provided train_data has 7500 rows, 1 time series. Median time series length is 7500 (min=7500, max=7500). 
Provided train_data has 7500 rows, 1 time series. Median time series length is 7500 (min=7500, max=7500). 
Provided train_data has 7500 rows, 1 time series. Median time series length is 7500 (min=7500, max=7500). 

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:
	target: 'VALUE (US$)'
	target: 'VALUE (US$)'
	target: 'VALUE (US$)'
	target: 'VALUE (US$)'

AutoGluon will gauge predictive performance using evaluation metric: 'MASE'

AutoGluon will gauge predictive performance using evaluation metric: 'MASE'

AutoGluon will gauge predictive performance using evaluation metric: 'MASE'

AutoGluon will gauge predictive performance using evaluation metric: 'MASE'
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
===================================================
===================================================
===================================================
===================================================

Starting training. Start time is 2024-06-29 17:42:31

Starting training. Start time is 2024-06-29 17:42:31

Starting training. Start time is 2024-06-29 17:42:31

Starting training. Start time is 2024-06-29 17:42:31
Models that will be trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'CrostonSBA', 'NPTS', 'DynamicOptimizedTheta', 'AutoETS', 'AutoARIMA', 'Chronos[base]', 'TemporalFusionTransformer', 'DeepAR', 'PatchTST']
Models that will be trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'CrostonSBA', 'NPTS', 'DynamicOptimizedTheta', 'AutoETS', 'AutoARIMA', 'Chronos[base]', 'TemporalFusionTransformer', 'DeepAR', 'PatchTST']
Models that will be trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'CrostonSBA', 'NPTS', 'DynamicOptimizedTheta', 'AutoETS', 'AutoARIMA', 'Chronos[base]', 'TemporalFusionTransformer', 'DeepAR', 'PatchTST']
Models that will be trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'CrostonSBA', 'NPTS', 'DynamicOptimizedTheta', 'AutoETS', 'AutoARIMA', 'Chronos[base]', 'TemporalFusionTransformer', 'DeepAR', 'PatchTST']
Training timeseries model SeasonalNaive. Training for up to 46.2s of the 600.0s of remaining time.
Training timeseries model SeasonalNaive. Training for up to 46.2s of the 600.0s of remaining time.
Training timeseries model SeasonalNaive. Training for up to 46.2s of the 600.0s of remaining time.
Training timeseries model SeasonalNaive. Training for up to 46.2s of the 600.0s of remaining time.
	-6.4379       = Validation score (-MASE)
	-6.4379       = Validation score (-MASE)
	-6.4379       = Validation score (-MASE)
	-6.4379       = Validation score (-MASE)
	5.09    s     = Training runtime
	5.09    s     = Training runtime
	5.09    s     = Training runtime
	5.09    s     = Training runtime
	2.39    s     = Validation (prediction) runtime
	2.39    s     = Validation (prediction) runtime
	2.39    s     = Validation (prediction) runtime
	2.39    s     = Validation (prediction) runtime
Training timeseries model RecursiveTabular. Training for up to 49.4s of the 592.5s of remaining time.
Training timeseries model RecursiveTabular. Training for up to 49.4s of the 592.5s of remaining time.
Training timeseries model RecursiveTabular. Training for up to 49.4s of the 592.5s of remaining time.
Training timeseries model RecursiveTabular. Training for up to 49.4s of the 592.5s of remaining time.
	Time limit exceeded... Skipping RecursiveTabular.
	Time limit exceeded... Skipping RecursiveTabular.
	Time limit exceeded... Skipping RecursiveTabular.
	Time limit exceeded... Skipping RecursiveTabular.
Training timeseries model DirectTabular. Training for up to 47.8s of the 525.8s of remaining time.
Training timeseries model DirectTabular. Training for up to 47.8s of the 525.8s of remaining time.
Training timeseries model DirectTabular. Training for up to 47.8s of the 525.8s of remaining time.
Training timeseries model DirectTabular. Training for up to 47.8s of the 525.8s of remaining time.
	-13.2453      = Validation score (-MASE)
	-13.2453      = Validation score (-MASE)
	-13.2453      = Validation score (-MASE)
	-13.2453      = Validation score (-MASE)
	5.21    s     = Training runtime
	5.21    s     = Training runtime
	5.21    s     = Training runtime
	5.21    s     = Training runtime
	0.16    s     = Validation (prediction) runtime
	0.16    s     = Validation (prediction) runtime
	0.16    s     = Validation (prediction) runtime
	0.16    s     = Validation (prediction) runtime
Training timeseries model CrostonSBA. Training for up to 52.0s of the 520.4s of remaining time.
Training timeseries model CrostonSBA. Training for up to 52.0s of the 520.4s of remaining time.
Training timeseries model CrostonSBA. Training for up to 52.0s of the 520.4s of remaining time.
Training timeseries model CrostonSBA. Training for up to 52.0s of the 520.4s of remaining time.
	-6.0460       = Validation score (-MASE)
	-6.0460       = Validation score (-MASE)
	-6.0460       = Validation score (-MASE)
	-6.0460       = Validation score (-MASE)
	26.33   s     = Training runtime
	26.33   s     = Training runtime
	26.33   s     = Training runtime
	26.33   s     = Training runtime
	13.05   s     = Validation (prediction) runtime
	13.05   s     = Validation (prediction) runtime
	13.05   s     = Validation (prediction) runtime
	13.05   s     = Validation (prediction) runtime
Training timeseries model NPTS. Training for up to 53.4s of the 481.0s of remaining time.
Training timeseries model NPTS. Training for up to 53.4s of the 481.0s of remaining time.
Training timeseries model NPTS. Training for up to 53.4s of the 481.0s of remaining time.
Training timeseries model NPTS. Training for up to 53.4s of the 481.0s of remaining time.
	Time limit exceeded... Skipping NPTS.
	Time limit exceeded... Skipping NPTS.
	Time limit exceeded... Skipping NPTS.
	Time limit exceeded... Skipping NPTS.
Training timeseries model DynamicOptimizedTheta. Training for up to 53.4s of the 427.1s of remaining time.
Training timeseries model DynamicOptimizedTheta. Training for up to 53.4s of the 427.1s of remaining time.
Training timeseries model DynamicOptimizedTheta. Training for up to 53.4s of the 427.1s of remaining time.
Training timeseries model DynamicOptimizedTheta. Training for up to 53.4s of the 427.1s of remaining time.
	Time limit exceeded... Skipping DynamicOptimizedTheta.
	Time limit exceeded... Skipping DynamicOptimizedTheta.
	Time limit exceeded... Skipping DynamicOptimizedTheta.
	Time limit exceeded... Skipping DynamicOptimizedTheta.
Training timeseries model AutoETS. Training for up to 55.4s of the 387.9s of remaining time.
Training timeseries model AutoETS. Training for up to 55.4s of the 387.9s of remaining time.
Training timeseries model AutoETS. Training for up to 55.4s of the 387.9s of remaining time.
Training timeseries model AutoETS. Training for up to 55.4s of the 387.9s of remaining time.
	Time limit exceeded... Skipping AutoETS.
	Time limit exceeded... Skipping AutoETS.
	Time limit exceeded... Skipping AutoETS.
	Time limit exceeded... Skipping AutoETS.
Training timeseries model AutoARIMA. Training for up to 57.7s of the 346.2s of remaining time.
Training timeseries model AutoARIMA. Training for up to 57.7s of the 346.2s of remaining time.
Training timeseries model AutoARIMA. Training for up to 57.7s of the 346.2s of remaining time.
Training timeseries model AutoARIMA. Training for up to 57.7s of the 346.2s of remaining time.
	Time limit exceeded... Skipping AutoARIMA.
	Time limit exceeded... Skipping AutoARIMA.
	Time limit exceeded... Skipping AutoARIMA.
	Time limit exceeded... Skipping AutoARIMA.
Training timeseries model Chronos[base]. Training for up to 57.6s of the 288.1s of remaining time.
Training timeseries model Chronos[base]. Training for up to 57.6s of the 288.1s of remaining time.
Training timeseries model Chronos[base]. Training for up to 57.6s of the 288.1s of remaining time.
Training timeseries model Chronos[base]. Training for up to 57.6s of the 288.1s of remaining time.
	Warning: Exception caused Chronos[base] to fail during training... Skipping this model.
	Warning: Exception caused Chronos[base] to fail during training... Skipping this model.
	Warning: Exception caused Chronos[base] to fail during training... Skipping this model.
	Warning: Exception caused Chronos[base] to fail during training... Skipping this model.
	Chronos[base]\W0 requires a GPU to run, but no GPU was detected. Please make sure that you are using a computer with a CUDA-compatible GPU and `import torch; torch.cuda.is_available()` returns `True`.
	Chronos[base]\W0 requires a GPU to run, but no GPU was detected. Please make sure that you are using a computer with a CUDA-compatible GPU and `import torch; torch.cuda.is_available()` returns `True`.
	Chronos[base]\W0 requires a GPU to run, but no GPU was detected. Please make sure that you are using a computer with a CUDA-compatible GPU and `import torch; torch.cuda.is_available()` returns `True`.
	Chronos[base]\W0 requires a GPU to run, but no GPU was detected. Please make sure that you are using a computer with a CUDA-compatible GPU and `import torch; torch.cuda.is_available()` returns `True`.
Training timeseries model TemporalFusionTransformer. Training for up to 71.6s of the 286.2s of remaining time.
Training timeseries model TemporalFusionTransformer. Training for up to 71.6s of the 286.2s of remaining time.
Training timeseries model TemporalFusionTransformer. Training for up to 71.6s of the 286.2s of remaining time.
Training timeseries model TemporalFusionTransformer. Training for up to 71.6s of the 286.2s of remaining time.
	-9.3036       = Validation score (-MASE)
	-9.3036       = Validation score (-MASE)
	-9.3036       = Validation score (-MASE)
	-9.3036       = Validation score (-MASE)
	74.35   s     = Training runtime
	74.35   s     = Training runtime
	74.35   s     = Training runtime
	74.35   s     = Training runtime
	0.17    s     = Validation (prediction) runtime
	0.17    s     = Validation (prediction) runtime
	0.17    s     = Validation (prediction) runtime
	0.17    s     = Validation (prediction) runtime
Training timeseries model DeepAR. Training for up to 70.6s of the 211.7s of remaining time.
Training timeseries model DeepAR. Training for up to 70.6s of the 211.7s of remaining time.
Training timeseries model DeepAR. Training for up to 70.6s of the 211.7s of remaining time.
Training timeseries model DeepAR. Training for up to 70.6s of the 211.7s of remaining time.
	-14.3031      = Validation score (-MASE)
	-14.3031      = Validation score (-MASE)
	-14.3031      = Validation score (-MASE)
	-14.3031      = Validation score (-MASE)
	72.24   s     = Training runtime
	72.24   s     = Training runtime
	72.24   s     = Training runtime
	72.24   s     = Training runtime
	6.46    s     = Validation (prediction) runtime
	6.46    s     = Validation (prediction) runtime
	6.46    s     = Validation (prediction) runtime
	6.46    s     = Validation (prediction) runtime
Training timeseries model PatchTST. Training for up to 66.5s of the 132.9s of remaining time.
Training timeseries model PatchTST. Training for up to 66.5s of the 132.9s of remaining time.
Training timeseries model PatchTST. Training for up to 66.5s of the 132.9s of remaining time.
Training timeseries model PatchTST. Training for up to 66.5s of the 132.9s of remaining time.
	-6.2473       = Validation score (-MASE)
	-6.2473       = Validation score (-MASE)
	-6.2473       = Validation score (-MASE)
	-6.2473       = Validation score (-MASE)
	64.88   s     = Training runtime
	64.88   s     = Training runtime
	64.88   s     = Training runtime
	64.88   s     = Training runtime
	0.17    s     = Validation (prediction) runtime
	0.17    s     = Validation (prediction) runtime
	0.17    s     = Validation (prediction) runtime
	0.17    s     = Validation (prediction) runtime
Fitting simple weighted ensemble.
Fitting simple weighted ensemble.
Fitting simple weighted ensemble.
Fitting simple weighted ensemble.
	Ensemble weights: {'CrostonSBA': 0.65, 'DeepAR': 0.02, 'PatchTST': 0.31, 'TemporalFusionTransformer': 0.02}
	Ensemble weights: {'CrostonSBA': 0.65, 'DeepAR': 0.02, 'PatchTST': 0.31, 'TemporalFusionTransformer': 0.02}
	Ensemble weights: {'CrostonSBA': 0.65, 'DeepAR': 0.02, 'PatchTST': 0.31, 'TemporalFusionTransformer': 0.02}
	Ensemble weights: {'CrostonSBA': 0.65, 'DeepAR': 0.02, 'PatchTST': 0.31, 'TemporalFusionTransformer': 0.02}
	-5.6961       = Validation score (-MASE)
	-5.6961       = Validation score (-MASE)
	-5.6961       = Validation score (-MASE)
	-5.6961       = Validation score (-MASE)
	1.49    s     = Training runtime
	1.49    s     = Training runtime
	1.49    s     = Training runtime
	1.49    s     = Training runtime
	19.85   s     = Validation (prediction) runtime
	19.85   s     = Validation (prediction) runtime
	19.85   s     = Validation (prediction) runtime
	19.85   s     = Validation (prediction) runtime
Training complete. Models trained: ['SeasonalNaive', 'DirectTabular', 'CrostonSBA', 'TemporalFusionTransformer', 'DeepAR', 'PatchTST', 'WeightedEnsemble']
Training complete. Models trained: ['SeasonalNaive', 'DirectTabular', 'CrostonSBA', 'TemporalFusionTransformer', 'DeepAR', 'PatchTST', 'WeightedEnsemble']
Training complete. Models trained: ['SeasonalNaive', 'DirectTabular', 'CrostonSBA', 'TemporalFusionTransformer', 'DeepAR', 'PatchTST', 'WeightedEnsemble']
Training complete. Models trained: ['SeasonalNaive', 'DirectTabular', 'CrostonSBA', 'TemporalFusionTransformer', 'DeepAR', 'PatchTST', 'WeightedEnsemble']
Total runtime: 533.73 s
Total runtime: 533.73 s
Total runtime: 533.73 s
Total runtime: 533.73 s
Best model: WeightedEnsemble
Best model: WeightedEnsemble
Best model: WeightedEnsemble
Best model: WeightedEnsemble
Best model score: -5.6961
Best model score: -5.6961
Best model score: -5.6961
Best model score: -5.6961
Model not specified in predict, will default to the model with the best validation score: WeightedEnsemble
Model not specified in predict, will default to the model with the best validation score: WeightedEnsemble
Model not specified in predict, will default to the model with the best validation score: WeightedEnsemble
Model not specified in predict, will default to the model with the best validation score: WeightedEnsemble
Additional data provided, testing on additional data. Resulting leaderboard will be sorted according to test score (`score_test`).
Additional data provided, testing on additional data. Resulting leaderboard will be sorted according to test score (`score_test`).
Additional data provided, testing on additional data. Resulting leaderboard will be sorted according to test score (`score_test`).
Additional data provided, testing on additional data. Resulting leaderboard will be sorted according to test score (`score_test`).
Warning: 1 time series (100.0%) are shorter than 0 and cannot be predicted by DirectTabular\W2. Fallback model SeasonalNaive is used for these time series.
Warning: 1 time series (100.0%) are shorter than 0 and cannot be predicted by DirectTabular\W2. Fallback model SeasonalNaive is used for these time series.
Warning: 1 time series (100.0%) are shorter than 0 and cannot be predicted by DirectTabular\W2. Fallback model SeasonalNaive is used for these time series.
Warning: 1 time series (100.0%) are shorter than 0 and cannot be predicted by DirectTabular\W2. Fallback model SeasonalNaive is used for these time series.
Beginning AutoGluon training... Time limit = 600s
Beginning AutoGluon training... Time limit = 600s
Beginning AutoGluon training... Time limit = 600s
Beginning AutoGluon training... Time limit = 600s
Beginning AutoGluon training... Time limit = 600s
Beginning AutoGluon training... Time limit = 600s
AutoGluon will save models to 'autogluon-petr'
AutoGluon will save models to 'autogluon-petr'
AutoGluon will save models to 'autogluon-petr'
AutoGluon will save models to 'autogluon-petr'
AutoGluon will save models to 'autogluon-petr'
AutoGluon will save models to 'autogluon-petr'
=================== System Info ===================
AutoGluon Version:  1.1.1
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.22635
CPU Count:          16
GPU Count:          0
Memory Avail:       14.63 GB / 31.74 GB (46.1%)
Disk Space Avail:   217.62 GB / 930.09 GB (23.4%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.1.1
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.22635
CPU Count:          16
GPU Count:          0
Memory Avail:       14.63 GB / 31.74 GB (46.1%)
Disk Space Avail:   217.62 GB / 930.09 GB (23.4%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.1.1
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.22635
CPU Count:          16
GPU Count:          0
Memory Avail:       14.63 GB / 31.74 GB (46.1%)
Disk Space Avail:   217.62 GB / 930.09 GB (23.4%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.1.1
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.22635
CPU Count:          16
GPU Count:          0
Memory Avail:       14.63 GB / 31.74 GB (46.1%)
Disk Space Avail:   217.62 GB / 930.09 GB (23.4%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.1.1
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.22635
CPU Count:          16
GPU Count:          0
Memory Avail:       14.63 GB / 31.74 GB (46.1%)
Disk Space Avail:   217.62 GB / 930.09 GB (23.4%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.1.1
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.22635
CPU Count:          16
GPU Count:          0
Memory Avail:       14.63 GB / 31.74 GB (46.1%)
Disk Space Avail:   217.62 GB / 930.09 GB (23.4%)
===================================================
Setting presets to: best_quality
Setting presets to: best_quality
Setting presets to: best_quality
Setting presets to: best_quality
Setting presets to: best_quality
Setting presets to: best_quality

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:
{'enable_ensemble': True,
 'eval_metric': MASE,
 'hyperparameters': 'default',
 'known_covariates_names': [],
 'num_val_windows': 5,
 'prediction_length': 1000,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'VALUE (US$)',
 'time_limit': 600,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': MASE,
 'hyperparameters': 'default',
 'known_covariates_names': [],
 'num_val_windows': 5,
 'prediction_length': 1000,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'VALUE (US$)',
 'time_limit': 600,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': MASE,
 'hyperparameters': 'default',
 'known_covariates_names': [],
 'num_val_windows': 5,
 'prediction_length': 1000,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'VALUE (US$)',
 'time_limit': 600,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': MASE,
 'hyperparameters': 'default',
 'known_covariates_names': [],
 'num_val_windows': 5,
 'prediction_length': 1000,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'VALUE (US$)',
 'time_limit': 600,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': MASE,
 'hyperparameters': 'default',
 'known_covariates_names': [],
 'num_val_windows': 5,
 'prediction_length': 1000,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'VALUE (US$)',
 'time_limit': 600,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': MASE,
 'hyperparameters': 'default',
 'known_covariates_names': [],
 'num_val_windows': 5,
 'prediction_length': 1000,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'VALUE (US$)',
 'time_limit': 600,
 'verbosity': 2}

Inferred time series frequency: 'D'
Inferred time series frequency: 'D'
Inferred time series frequency: 'D'
Inferred time series frequency: 'D'
Inferred time series frequency: 'D'
Inferred time series frequency: 'D'
Provided train_data has 7562 rows, 1 time series. Median time series length is 7562 (min=7562, max=7562). 
Provided train_data has 7562 rows, 1 time series. Median time series length is 7562 (min=7562, max=7562). 
Provided train_data has 7562 rows, 1 time series. Median time series length is 7562 (min=7562, max=7562). 
Provided train_data has 7562 rows, 1 time series. Median time series length is 7562 (min=7562, max=7562). 
Provided train_data has 7562 rows, 1 time series. Median time series length is 7562 (min=7562, max=7562). 
Provided train_data has 7562 rows, 1 time series. Median time series length is 7562 (min=7562, max=7562). 

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:
	target: 'VALUE (US$)'
	target: 'VALUE (US$)'
	target: 'VALUE (US$)'
	target: 'VALUE (US$)'
	target: 'VALUE (US$)'
	target: 'VALUE (US$)'

AutoGluon will gauge predictive performance using evaluation metric: 'MASE'

AutoGluon will gauge predictive performance using evaluation metric: 'MASE'

AutoGluon will gauge predictive performance using evaluation metric: 'MASE'

AutoGluon will gauge predictive performance using evaluation metric: 'MASE'

AutoGluon will gauge predictive performance using evaluation metric: 'MASE'

AutoGluon will gauge predictive performance using evaluation metric: 'MASE'
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================

Starting training. Start time is 2024-06-29 19:40:50

Starting training. Start time is 2024-06-29 19:40:50

Starting training. Start time is 2024-06-29 19:40:50

Starting training. Start time is 2024-06-29 19:40:50

Starting training. Start time is 2024-06-29 19:40:50

Starting training. Start time is 2024-06-29 19:40:50
Models that will be trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'CrostonSBA', 'NPTS', 'DynamicOptimizedTheta', 'AutoETS', 'AutoARIMA', 'Chronos[base]', 'TemporalFusionTransformer', 'DeepAR', 'PatchTST']
Models that will be trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'CrostonSBA', 'NPTS', 'DynamicOptimizedTheta', 'AutoETS', 'AutoARIMA', 'Chronos[base]', 'TemporalFusionTransformer', 'DeepAR', 'PatchTST']
Models that will be trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'CrostonSBA', 'NPTS', 'DynamicOptimizedTheta', 'AutoETS', 'AutoARIMA', 'Chronos[base]', 'TemporalFusionTransformer', 'DeepAR', 'PatchTST']
Models that will be trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'CrostonSBA', 'NPTS', 'DynamicOptimizedTheta', 'AutoETS', 'AutoARIMA', 'Chronos[base]', 'TemporalFusionTransformer', 'DeepAR', 'PatchTST']
Models that will be trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'CrostonSBA', 'NPTS', 'DynamicOptimizedTheta', 'AutoETS', 'AutoARIMA', 'Chronos[base]', 'TemporalFusionTransformer', 'DeepAR', 'PatchTST']
Models that will be trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'CrostonSBA', 'NPTS', 'DynamicOptimizedTheta', 'AutoETS', 'AutoARIMA', 'Chronos[base]', 'TemporalFusionTransformer', 'DeepAR', 'PatchTST']
Training timeseries model SeasonalNaive. Training for up to 46.2s of the 600.0s of remaining time.
Training timeseries model SeasonalNaive. Training for up to 46.2s of the 600.0s of remaining time.
Training timeseries model SeasonalNaive. Training for up to 46.2s of the 600.0s of remaining time.
Training timeseries model SeasonalNaive. Training for up to 46.2s of the 600.0s of remaining time.
Training timeseries model SeasonalNaive. Training for up to 46.2s of the 600.0s of remaining time.
Training timeseries model SeasonalNaive. Training for up to 46.2s of the 600.0s of remaining time.
	-11.2022      = Validation score (-MASE)
	-11.2022      = Validation score (-MASE)
	-11.2022      = Validation score (-MASE)
	-11.2022      = Validation score (-MASE)
	-11.2022      = Validation score (-MASE)
	-11.2022      = Validation score (-MASE)
	10.41   s     = Training runtime
	10.41   s     = Training runtime
	10.41   s     = Training runtime
	10.41   s     = Training runtime
	10.41   s     = Training runtime
	10.41   s     = Training runtime
	2.36    s     = Validation (prediction) runtime
	2.36    s     = Validation (prediction) runtime
	2.36    s     = Validation (prediction) runtime
	2.36    s     = Validation (prediction) runtime
	2.36    s     = Validation (prediction) runtime
	2.36    s     = Validation (prediction) runtime
Training timeseries model RecursiveTabular. Training for up to 48.9s of the 587.2s of remaining time.
Training timeseries model RecursiveTabular. Training for up to 48.9s of the 587.2s of remaining time.
Training timeseries model RecursiveTabular. Training for up to 48.9s of the 587.2s of remaining time.
Training timeseries model RecursiveTabular. Training for up to 48.9s of the 587.2s of remaining time.
Training timeseries model RecursiveTabular. Training for up to 48.9s of the 587.2s of remaining time.
Training timeseries model RecursiveTabular. Training for up to 48.9s of the 587.2s of remaining time.
	Time limit exceeded... Skipping RecursiveTabular.
	Time limit exceeded... Skipping RecursiveTabular.
	Time limit exceeded... Skipping RecursiveTabular.
	Time limit exceeded... Skipping RecursiveTabular.
	Time limit exceeded... Skipping RecursiveTabular.
	Time limit exceeded... Skipping RecursiveTabular.
Training timeseries model DirectTabular. Training for up to 48.5s of the 533.6s of remaining time.
Training timeseries model DirectTabular. Training for up to 48.5s of the 533.6s of remaining time.
Training timeseries model DirectTabular. Training for up to 48.5s of the 533.6s of remaining time.
Training timeseries model DirectTabular. Training for up to 48.5s of the 533.6s of remaining time.
Training timeseries model DirectTabular. Training for up to 48.5s of the 533.6s of remaining time.
Training timeseries model DirectTabular. Training for up to 48.5s of the 533.6s of remaining time.
	-13.7448      = Validation score (-MASE)
	-13.7448      = Validation score (-MASE)
	-13.7448      = Validation score (-MASE)
	-13.7448      = Validation score (-MASE)
	-13.7448      = Validation score (-MASE)
	-13.7448      = Validation score (-MASE)
	9.16    s     = Training runtime
	9.16    s     = Training runtime
	9.16    s     = Training runtime
	9.16    s     = Training runtime
	9.16    s     = Training runtime
	9.16    s     = Training runtime
	0.18    s     = Validation (prediction) runtime
	0.18    s     = Validation (prediction) runtime
	0.18    s     = Validation (prediction) runtime
	0.18    s     = Validation (prediction) runtime
	0.18    s     = Validation (prediction) runtime
	0.18    s     = Validation (prediction) runtime
Training timeseries model CrostonSBA. Training for up to 52.4s of the 524.3s of remaining time.
Training timeseries model CrostonSBA. Training for up to 52.4s of the 524.3s of remaining time.
Training timeseries model CrostonSBA. Training for up to 52.4s of the 524.3s of remaining time.
Training timeseries model CrostonSBA. Training for up to 52.4s of the 524.3s of remaining time.
Training timeseries model CrostonSBA. Training for up to 52.4s of the 524.3s of remaining time.
Training timeseries model CrostonSBA. Training for up to 52.4s of the 524.3s of remaining time.
	Time limit exceeded... Skipping CrostonSBA.
	Time limit exceeded... Skipping CrostonSBA.
	Time limit exceeded... Skipping CrostonSBA.
	Time limit exceeded... Skipping CrostonSBA.
	Time limit exceeded... Skipping CrostonSBA.
	Time limit exceeded... Skipping CrostonSBA.
Training timeseries model NPTS. Training for up to 53.4s of the 480.3s of remaining time.
Training timeseries model NPTS. Training for up to 53.4s of the 480.3s of remaining time.
Training timeseries model NPTS. Training for up to 53.4s of the 480.3s of remaining time.
Training timeseries model NPTS. Training for up to 53.4s of the 480.3s of remaining time.
Training timeseries model NPTS. Training for up to 53.4s of the 480.3s of remaining time.
Training timeseries model NPTS. Training for up to 53.4s of the 480.3s of remaining time.
	Time limit exceeded... Skipping NPTS.
	Time limit exceeded... Skipping NPTS.
	Time limit exceeded... Skipping NPTS.
	Time limit exceeded... Skipping NPTS.
	Time limit exceeded... Skipping NPTS.
	Time limit exceeded... Skipping NPTS.
Training timeseries model DynamicOptimizedTheta. Training for up to 53.3s of the 426.4s of remaining time.
Training timeseries model DynamicOptimizedTheta. Training for up to 53.3s of the 426.4s of remaining time.
Training timeseries model DynamicOptimizedTheta. Training for up to 53.3s of the 426.4s of remaining time.
Training timeseries model DynamicOptimizedTheta. Training for up to 53.3s of the 426.4s of remaining time.
Training timeseries model DynamicOptimizedTheta. Training for up to 53.3s of the 426.4s of remaining time.
Training timeseries model DynamicOptimizedTheta. Training for up to 53.3s of the 426.4s of remaining time.
	Time limit exceeded... Skipping DynamicOptimizedTheta.
	Time limit exceeded... Skipping DynamicOptimizedTheta.
	Time limit exceeded... Skipping DynamicOptimizedTheta.
	Time limit exceeded... Skipping DynamicOptimizedTheta.
	Time limit exceeded... Skipping DynamicOptimizedTheta.
	Time limit exceeded... Skipping DynamicOptimizedTheta.
Training timeseries model AutoETS. Training for up to 55.3s of the 387.4s of remaining time.
Training timeseries model AutoETS. Training for up to 55.3s of the 387.4s of remaining time.
Training timeseries model AutoETS. Training for up to 55.3s of the 387.4s of remaining time.
Training timeseries model AutoETS. Training for up to 55.3s of the 387.4s of remaining time.
Training timeseries model AutoETS. Training for up to 55.3s of the 387.4s of remaining time.
Training timeseries model AutoETS. Training for up to 55.3s of the 387.4s of remaining time.
Beginning AutoGluon training... Time limit = 600s
Beginning AutoGluon training... Time limit = 600s
Beginning AutoGluon training... Time limit = 600s
Beginning AutoGluon training... Time limit = 600s
Beginning AutoGluon training... Time limit = 600s
Beginning AutoGluon training... Time limit = 600s
Beginning AutoGluon training... Time limit = 600s
AutoGluon will save models to 'autogluon-petr'
AutoGluon will save models to 'autogluon-petr'
AutoGluon will save models to 'autogluon-petr'
AutoGluon will save models to 'autogluon-petr'
AutoGluon will save models to 'autogluon-petr'
AutoGluon will save models to 'autogluon-petr'
AutoGluon will save models to 'autogluon-petr'
=================== System Info ===================
AutoGluon Version:  1.1.1
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.22635
CPU Count:          16
GPU Count:          0
Memory Avail:       15.19 GB / 31.74 GB (47.9%)
Disk Space Avail:   217.61 GB / 930.09 GB (23.4%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.1.1
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.22635
CPU Count:          16
GPU Count:          0
Memory Avail:       15.19 GB / 31.74 GB (47.9%)
Disk Space Avail:   217.61 GB / 930.09 GB (23.4%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.1.1
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.22635
CPU Count:          16
GPU Count:          0
Memory Avail:       15.19 GB / 31.74 GB (47.9%)
Disk Space Avail:   217.61 GB / 930.09 GB (23.4%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.1.1
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.22635
CPU Count:          16
GPU Count:          0
Memory Avail:       15.19 GB / 31.74 GB (47.9%)
Disk Space Avail:   217.61 GB / 930.09 GB (23.4%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.1.1
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.22635
CPU Count:          16
GPU Count:          0
Memory Avail:       15.19 GB / 31.74 GB (47.9%)
Disk Space Avail:   217.61 GB / 930.09 GB (23.4%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.1.1
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.22635
CPU Count:          16
GPU Count:          0
Memory Avail:       15.19 GB / 31.74 GB (47.9%)
Disk Space Avail:   217.61 GB / 930.09 GB (23.4%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.1.1
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.22635
CPU Count:          16
GPU Count:          0
Memory Avail:       15.19 GB / 31.74 GB (47.9%)
Disk Space Avail:   217.61 GB / 930.09 GB (23.4%)
===================================================
Setting presets to: best_quality
Setting presets to: best_quality
Setting presets to: best_quality
Setting presets to: best_quality
Setting presets to: best_quality
Setting presets to: best_quality
Setting presets to: best_quality

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:
{'enable_ensemble': True,
 'eval_metric': MASE,
 'hyperparameters': 'default',
 'known_covariates_names': [],
 'num_val_windows': 5,
 'prediction_length': 550,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'VALUE (US$)',
 'time_limit': 600,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': MASE,
 'hyperparameters': 'default',
 'known_covariates_names': [],
 'num_val_windows': 5,
 'prediction_length': 550,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'VALUE (US$)',
 'time_limit': 600,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': MASE,
 'hyperparameters': 'default',
 'known_covariates_names': [],
 'num_val_windows': 5,
 'prediction_length': 550,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'VALUE (US$)',
 'time_limit': 600,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': MASE,
 'hyperparameters': 'default',
 'known_covariates_names': [],
 'num_val_windows': 5,
 'prediction_length': 550,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'VALUE (US$)',
 'time_limit': 600,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': MASE,
 'hyperparameters': 'default',
 'known_covariates_names': [],
 'num_val_windows': 5,
 'prediction_length': 550,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'VALUE (US$)',
 'time_limit': 600,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': MASE,
 'hyperparameters': 'default',
 'known_covariates_names': [],
 'num_val_windows': 5,
 'prediction_length': 550,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'VALUE (US$)',
 'time_limit': 600,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': MASE,
 'hyperparameters': 'default',
 'known_covariates_names': [],
 'num_val_windows': 5,
 'prediction_length': 550,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'VALUE (US$)',
 'time_limit': 600,
 'verbosity': 2}

Inferred time series frequency: 'D'
Inferred time series frequency: 'D'
Inferred time series frequency: 'D'
Inferred time series frequency: 'D'
Inferred time series frequency: 'D'
Inferred time series frequency: 'D'
Inferred time series frequency: 'D'
Provided train_data has 8012 rows, 1 time series. Median time series length is 8012 (min=8012, max=8012). 
Provided train_data has 8012 rows, 1 time series. Median time series length is 8012 (min=8012, max=8012). 
Provided train_data has 8012 rows, 1 time series. Median time series length is 8012 (min=8012, max=8012). 
Provided train_data has 8012 rows, 1 time series. Median time series length is 8012 (min=8012, max=8012). 
Provided train_data has 8012 rows, 1 time series. Median time series length is 8012 (min=8012, max=8012). 
Provided train_data has 8012 rows, 1 time series. Median time series length is 8012 (min=8012, max=8012). 
Provided train_data has 8012 rows, 1 time series. Median time series length is 8012 (min=8012, max=8012). 

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:
	target: 'VALUE (US$)'
	target: 'VALUE (US$)'
	target: 'VALUE (US$)'
	target: 'VALUE (US$)'
	target: 'VALUE (US$)'
	target: 'VALUE (US$)'
	target: 'VALUE (US$)'

AutoGluon will gauge predictive performance using evaluation metric: 'MASE'

AutoGluon will gauge predictive performance using evaluation metric: 'MASE'

AutoGluon will gauge predictive performance using evaluation metric: 'MASE'

AutoGluon will gauge predictive performance using evaluation metric: 'MASE'

AutoGluon will gauge predictive performance using evaluation metric: 'MASE'

AutoGluon will gauge predictive performance using evaluation metric: 'MASE'

AutoGluon will gauge predictive performance using evaluation metric: 'MASE'
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================

Starting training. Start time is 2024-06-29 19:55:03

Starting training. Start time is 2024-06-29 19:55:03

Starting training. Start time is 2024-06-29 19:55:03

Starting training. Start time is 2024-06-29 19:55:03

Starting training. Start time is 2024-06-29 19:55:03

Starting training. Start time is 2024-06-29 19:55:03

Starting training. Start time is 2024-06-29 19:55:03
Models that will be trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'CrostonSBA', 'NPTS', 'DynamicOptimizedTheta', 'AutoETS', 'AutoARIMA', 'Chronos[base]', 'TemporalFusionTransformer', 'DeepAR', 'PatchTST']
Models that will be trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'CrostonSBA', 'NPTS', 'DynamicOptimizedTheta', 'AutoETS', 'AutoARIMA', 'Chronos[base]', 'TemporalFusionTransformer', 'DeepAR', 'PatchTST']
Models that will be trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'CrostonSBA', 'NPTS', 'DynamicOptimizedTheta', 'AutoETS', 'AutoARIMA', 'Chronos[base]', 'TemporalFusionTransformer', 'DeepAR', 'PatchTST']
Models that will be trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'CrostonSBA', 'NPTS', 'DynamicOptimizedTheta', 'AutoETS', 'AutoARIMA', 'Chronos[base]', 'TemporalFusionTransformer', 'DeepAR', 'PatchTST']
Models that will be trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'CrostonSBA', 'NPTS', 'DynamicOptimizedTheta', 'AutoETS', 'AutoARIMA', 'Chronos[base]', 'TemporalFusionTransformer', 'DeepAR', 'PatchTST']
Models that will be trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'CrostonSBA', 'NPTS', 'DynamicOptimizedTheta', 'AutoETS', 'AutoARIMA', 'Chronos[base]', 'TemporalFusionTransformer', 'DeepAR', 'PatchTST']
Models that will be trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'CrostonSBA', 'NPTS', 'DynamicOptimizedTheta', 'AutoETS', 'AutoARIMA', 'Chronos[base]', 'TemporalFusionTransformer', 'DeepAR', 'PatchTST']
Training timeseries model SeasonalNaive. Training for up to 46.2s of the 600.0s of remaining time.
Training timeseries model SeasonalNaive. Training for up to 46.2s of the 600.0s of remaining time.
Training timeseries model SeasonalNaive. Training for up to 46.2s of the 600.0s of remaining time.
Training timeseries model SeasonalNaive. Training for up to 46.2s of the 600.0s of remaining time.
Training timeseries model SeasonalNaive. Training for up to 46.2s of the 600.0s of remaining time.
Training timeseries model SeasonalNaive. Training for up to 46.2s of the 600.0s of remaining time.
Training timeseries model SeasonalNaive. Training for up to 46.2s of the 600.0s of remaining time.
	-6.9273       = Validation score (-MASE)
	-6.9273       = Validation score (-MASE)
	-6.9273       = Validation score (-MASE)
	-6.9273       = Validation score (-MASE)
	-6.9273       = Validation score (-MASE)
	-6.9273       = Validation score (-MASE)
	-6.9273       = Validation score (-MASE)
	10.69   s     = Training runtime
	10.69   s     = Training runtime
	10.69   s     = Training runtime
	10.69   s     = Training runtime
	10.69   s     = Training runtime
	10.69   s     = Training runtime
	10.69   s     = Training runtime
	2.41    s     = Validation (prediction) runtime
	2.41    s     = Validation (prediction) runtime
	2.41    s     = Validation (prediction) runtime
	2.41    s     = Validation (prediction) runtime
	2.41    s     = Validation (prediction) runtime
	2.41    s     = Validation (prediction) runtime
	2.41    s     = Validation (prediction) runtime
Training timeseries model RecursiveTabular. Training for up to 48.9s of the 586.8s of remaining time.
Training timeseries model RecursiveTabular. Training for up to 48.9s of the 586.8s of remaining time.
Training timeseries model RecursiveTabular. Training for up to 48.9s of the 586.8s of remaining time.
Training timeseries model RecursiveTabular. Training for up to 48.9s of the 586.8s of remaining time.
Training timeseries model RecursiveTabular. Training for up to 48.9s of the 586.8s of remaining time.
Training timeseries model RecursiveTabular. Training for up to 48.9s of the 586.8s of remaining time.
Training timeseries model RecursiveTabular. Training for up to 48.9s of the 586.8s of remaining time.
	Time limit exceeded... Skipping RecursiveTabular.
	Time limit exceeded... Skipping RecursiveTabular.
	Time limit exceeded... Skipping RecursiveTabular.
	Time limit exceeded... Skipping RecursiveTabular.
	Time limit exceeded... Skipping RecursiveTabular.
	Time limit exceeded... Skipping RecursiveTabular.
	Time limit exceeded... Skipping RecursiveTabular.
Training timeseries model DirectTabular. Training for up to 48.5s of the 533.4s of remaining time.
Training timeseries model DirectTabular. Training for up to 48.5s of the 533.4s of remaining time.
Training timeseries model DirectTabular. Training for up to 48.5s of the 533.4s of remaining time.
Training timeseries model DirectTabular. Training for up to 48.5s of the 533.4s of remaining time.
Training timeseries model DirectTabular. Training for up to 48.5s of the 533.4s of remaining time.
Training timeseries model DirectTabular. Training for up to 48.5s of the 533.4s of remaining time.
Training timeseries model DirectTabular. Training for up to 48.5s of the 533.4s of remaining time.
	-10.0551      = Validation score (-MASE)
	-10.0551      = Validation score (-MASE)
	-10.0551      = Validation score (-MASE)
	-10.0551      = Validation score (-MASE)
	-10.0551      = Validation score (-MASE)
	-10.0551      = Validation score (-MASE)
	-10.0551      = Validation score (-MASE)
	8.93    s     = Training runtime
	8.93    s     = Training runtime
	8.93    s     = Training runtime
	8.93    s     = Training runtime
	8.93    s     = Training runtime
	8.93    s     = Training runtime
	8.93    s     = Training runtime
	0.15    s     = Validation (prediction) runtime
	0.15    s     = Validation (prediction) runtime
	0.15    s     = Validation (prediction) runtime
	0.15    s     = Validation (prediction) runtime
	0.15    s     = Validation (prediction) runtime
	0.15    s     = Validation (prediction) runtime
	0.15    s     = Validation (prediction) runtime
Training timeseries model CrostonSBA. Training for up to 52.4s of the 524.3s of remaining time.
Training timeseries model CrostonSBA. Training for up to 52.4s of the 524.3s of remaining time.
Training timeseries model CrostonSBA. Training for up to 52.4s of the 524.3s of remaining time.
Training timeseries model CrostonSBA. Training for up to 52.4s of the 524.3s of remaining time.
Training timeseries model CrostonSBA. Training for up to 52.4s of the 524.3s of remaining time.
Training timeseries model CrostonSBA. Training for up to 52.4s of the 524.3s of remaining time.
Training timeseries model CrostonSBA. Training for up to 52.4s of the 524.3s of remaining time.
	Time limit exceeded... Skipping CrostonSBA.
	Time limit exceeded... Skipping CrostonSBA.
	Time limit exceeded... Skipping CrostonSBA.
	Time limit exceeded... Skipping CrostonSBA.
	Time limit exceeded... Skipping CrostonSBA.
	Time limit exceeded... Skipping CrostonSBA.
	Time limit exceeded... Skipping CrostonSBA.
Training timeseries model NPTS. Training for up to 53.4s of the 480.4s of remaining time.
Training timeseries model NPTS. Training for up to 53.4s of the 480.4s of remaining time.
Training timeseries model NPTS. Training for up to 53.4s of the 480.4s of remaining time.
Training timeseries model NPTS. Training for up to 53.4s of the 480.4s of remaining time.
Training timeseries model NPTS. Training for up to 53.4s of the 480.4s of remaining time.
Training timeseries model NPTS. Training for up to 53.4s of the 480.4s of remaining time.
Training timeseries model NPTS. Training for up to 53.4s of the 480.4s of remaining time.
	Time limit exceeded... Skipping NPTS.
	Time limit exceeded... Skipping NPTS.
	Time limit exceeded... Skipping NPTS.
	Time limit exceeded... Skipping NPTS.
	Time limit exceeded... Skipping NPTS.
	Time limit exceeded... Skipping NPTS.
	Time limit exceeded... Skipping NPTS.
Training timeseries model DynamicOptimizedTheta. Training for up to 53.3s of the 426.6s of remaining time.
Training timeseries model DynamicOptimizedTheta. Training for up to 53.3s of the 426.6s of remaining time.
Training timeseries model DynamicOptimizedTheta. Training for up to 53.3s of the 426.6s of remaining time.
Training timeseries model DynamicOptimizedTheta. Training for up to 53.3s of the 426.6s of remaining time.
Training timeseries model DynamicOptimizedTheta. Training for up to 53.3s of the 426.6s of remaining time.
Training timeseries model DynamicOptimizedTheta. Training for up to 53.3s of the 426.6s of remaining time.
Training timeseries model DynamicOptimizedTheta. Training for up to 53.3s of the 426.6s of remaining time.
	Time limit exceeded... Skipping DynamicOptimizedTheta.
	Time limit exceeded... Skipping DynamicOptimizedTheta.
	Time limit exceeded... Skipping DynamicOptimizedTheta.
	Time limit exceeded... Skipping DynamicOptimizedTheta.
	Time limit exceeded... Skipping DynamicOptimizedTheta.
	Time limit exceeded... Skipping DynamicOptimizedTheta.
	Time limit exceeded... Skipping DynamicOptimizedTheta.
Training timeseries model AutoETS. Training for up to 55.4s of the 388.0s of remaining time.
Training timeseries model AutoETS. Training for up to 55.4s of the 388.0s of remaining time.
Training timeseries model AutoETS. Training for up to 55.4s of the 388.0s of remaining time.
Training timeseries model AutoETS. Training for up to 55.4s of the 388.0s of remaining time.
Training timeseries model AutoETS. Training for up to 55.4s of the 388.0s of remaining time.
Training timeseries model AutoETS. Training for up to 55.4s of the 388.0s of remaining time.
Training timeseries model AutoETS. Training for up to 55.4s of the 388.0s of remaining time.
	Time limit exceeded... Skipping AutoETS.
	Time limit exceeded... Skipping AutoETS.
	Time limit exceeded... Skipping AutoETS.
	Time limit exceeded... Skipping AutoETS.
	Time limit exceeded... Skipping AutoETS.
	Time limit exceeded... Skipping AutoETS.
	Time limit exceeded... Skipping AutoETS.
Training timeseries model AutoARIMA. Training for up to 55.4s of the 332.2s of remaining time.
Training timeseries model AutoARIMA. Training for up to 55.4s of the 332.2s of remaining time.
Training timeseries model AutoARIMA. Training for up to 55.4s of the 332.2s of remaining time.
Training timeseries model AutoARIMA. Training for up to 55.4s of the 332.2s of remaining time.
Training timeseries model AutoARIMA. Training for up to 55.4s of the 332.2s of remaining time.
Training timeseries model AutoARIMA. Training for up to 55.4s of the 332.2s of remaining time.
Training timeseries model AutoARIMA. Training for up to 55.4s of the 332.2s of remaining time.
	Time limit exceeded... Skipping AutoARIMA.
	Time limit exceeded... Skipping AutoARIMA.
	Time limit exceeded... Skipping AutoARIMA.
	Time limit exceeded... Skipping AutoARIMA.
	Time limit exceeded... Skipping AutoARIMA.
	Time limit exceeded... Skipping AutoARIMA.
	Time limit exceeded... Skipping AutoARIMA.
Training timeseries model Chronos[base]. Training for up to 56.0s of the 280.0s of remaining time.
Training timeseries model Chronos[base]. Training for up to 56.0s of the 280.0s of remaining time.
Training timeseries model Chronos[base]. Training for up to 56.0s of the 280.0s of remaining time.
Training timeseries model Chronos[base]. Training for up to 56.0s of the 280.0s of remaining time.
Training timeseries model Chronos[base]. Training for up to 56.0s of the 280.0s of remaining time.
Training timeseries model Chronos[base]. Training for up to 56.0s of the 280.0s of remaining time.
Training timeseries model Chronos[base]. Training for up to 56.0s of the 280.0s of remaining time.
	Warning: Exception caused Chronos[base] to fail during training... Skipping this model.
	Warning: Exception caused Chronos[base] to fail during training... Skipping this model.
	Warning: Exception caused Chronos[base] to fail during training... Skipping this model.
	Warning: Exception caused Chronos[base] to fail during training... Skipping this model.
	Warning: Exception caused Chronos[base] to fail during training... Skipping this model.
	Warning: Exception caused Chronos[base] to fail during training... Skipping this model.
	Warning: Exception caused Chronos[base] to fail during training... Skipping this model.
	Chronos[base]\W0 requires a GPU to run, but no GPU was detected. Please make sure that you are using a computer with a CUDA-compatible GPU and `import torch; torch.cuda.is_available()` returns `True`.
	Chronos[base]\W0 requires a GPU to run, but no GPU was detected. Please make sure that you are using a computer with a CUDA-compatible GPU and `import torch; torch.cuda.is_available()` returns `True`.
	Chronos[base]\W0 requires a GPU to run, but no GPU was detected. Please make sure that you are using a computer with a CUDA-compatible GPU and `import torch; torch.cuda.is_available()` returns `True`.
	Chronos[base]\W0 requires a GPU to run, but no GPU was detected. Please make sure that you are using a computer with a CUDA-compatible GPU and `import torch; torch.cuda.is_available()` returns `True`.
	Chronos[base]\W0 requires a GPU to run, but no GPU was detected. Please make sure that you are using a computer with a CUDA-compatible GPU and `import torch; torch.cuda.is_available()` returns `True`.
	Chronos[base]\W0 requires a GPU to run, but no GPU was detected. Please make sure that you are using a computer with a CUDA-compatible GPU and `import torch; torch.cuda.is_available()` returns `True`.
	Chronos[base]\W0 requires a GPU to run, but no GPU was detected. Please make sure that you are using a computer with a CUDA-compatible GPU and `import torch; torch.cuda.is_available()` returns `True`.
Training timeseries model TemporalFusionTransformer. Training for up to 70.0s of the 280.0s of remaining time.
Training timeseries model TemporalFusionTransformer. Training for up to 70.0s of the 280.0s of remaining time.
Training timeseries model TemporalFusionTransformer. Training for up to 70.0s of the 280.0s of remaining time.
Training timeseries model TemporalFusionTransformer. Training for up to 70.0s of the 280.0s of remaining time.
Training timeseries model TemporalFusionTransformer. Training for up to 70.0s of the 280.0s of remaining time.
Training timeseries model TemporalFusionTransformer. Training for up to 70.0s of the 280.0s of remaining time.
Training timeseries model TemporalFusionTransformer. Training for up to 70.0s of the 280.0s of remaining time.
	Time limit exceeded... Skipping TemporalFusionTransformer.
	Time limit exceeded... Skipping TemporalFusionTransformer.
	Time limit exceeded... Skipping TemporalFusionTransformer.
	Time limit exceeded... Skipping TemporalFusionTransformer.
	Time limit exceeded... Skipping TemporalFusionTransformer.
	Time limit exceeded... Skipping TemporalFusionTransformer.
	Time limit exceeded... Skipping TemporalFusionTransformer.
Stopping training due to lack of time remaining. Time left: -602.7 seconds
Stopping training due to lack of time remaining. Time left: -602.7 seconds
Stopping training due to lack of time remaining. Time left: -602.7 seconds
Stopping training due to lack of time remaining. Time left: -602.7 seconds
Stopping training due to lack of time remaining. Time left: -602.7 seconds
Stopping training due to lack of time remaining. Time left: -602.7 seconds
Stopping training due to lack of time remaining. Time left: -602.7 seconds
Not fitting ensemble due to lack of time remaining. Time left: -602.7 seconds
Not fitting ensemble due to lack of time remaining. Time left: -602.7 seconds
Not fitting ensemble due to lack of time remaining. Time left: -602.7 seconds
Not fitting ensemble due to lack of time remaining. Time left: -602.7 seconds
Not fitting ensemble due to lack of time remaining. Time left: -602.7 seconds
Not fitting ensemble due to lack of time remaining. Time left: -602.7 seconds
Not fitting ensemble due to lack of time remaining. Time left: -602.7 seconds
Training complete. Models trained: ['SeasonalNaive', 'DirectTabular']
Training complete. Models trained: ['SeasonalNaive', 'DirectTabular']
Training complete. Models trained: ['SeasonalNaive', 'DirectTabular']
Training complete. Models trained: ['SeasonalNaive', 'DirectTabular']
Training complete. Models trained: ['SeasonalNaive', 'DirectTabular']
Training complete. Models trained: ['SeasonalNaive', 'DirectTabular']
Training complete. Models trained: ['SeasonalNaive', 'DirectTabular']
Total runtime: 1202.72 s
Total runtime: 1202.72 s
Total runtime: 1202.72 s
Total runtime: 1202.72 s
Total runtime: 1202.72 s
Total runtime: 1202.72 s
Total runtime: 1202.72 s
Best model: SeasonalNaive
Best model: SeasonalNaive
Best model: SeasonalNaive
Best model: SeasonalNaive
Best model: SeasonalNaive
Best model: SeasonalNaive
Best model: SeasonalNaive
Best model score: -6.9273
Best model score: -6.9273
Best model score: -6.9273
Best model score: -6.9273
Best model score: -6.9273
Best model score: -6.9273
Best model score: -6.9273
Model not specified in predict, will default to the model with the best validation score: SeasonalNaive
Model not specified in predict, will default to the model with the best validation score: SeasonalNaive
Model not specified in predict, will default to the model with the best validation score: SeasonalNaive
Model not specified in predict, will default to the model with the best validation score: SeasonalNaive
Model not specified in predict, will default to the model with the best validation score: SeasonalNaive
Model not specified in predict, will default to the model with the best validation score: SeasonalNaive
Model not specified in predict, will default to the model with the best validation score: SeasonalNaive
Additional data provided, testing on additional data. Resulting leaderboard will be sorted according to test score (`score_test`).
Additional data provided, testing on additional data. Resulting leaderboard will be sorted according to test score (`score_test`).
Additional data provided, testing on additional data. Resulting leaderboard will be sorted according to test score (`score_test`).
Additional data provided, testing on additional data. Resulting leaderboard will be sorted according to test score (`score_test`).
Additional data provided, testing on additional data. Resulting leaderboard will be sorted according to test score (`score_test`).
Additional data provided, testing on additional data. Resulting leaderboard will be sorted according to test score (`score_test`).
Additional data provided, testing on additional data. Resulting leaderboard will be sorted according to test score (`score_test`).
Beginning AutoGluon training... Time limit = 600s
Beginning AutoGluon training... Time limit = 600s
Beginning AutoGluon training... Time limit = 600s
Beginning AutoGluon training... Time limit = 600s
Beginning AutoGluon training... Time limit = 600s
Beginning AutoGluon training... Time limit = 600s
Beginning AutoGluon training... Time limit = 600s
Beginning AutoGluon training... Time limit = 600s
AutoGluon will save models to 'autogluon-petr'
AutoGluon will save models to 'autogluon-petr'
AutoGluon will save models to 'autogluon-petr'
AutoGluon will save models to 'autogluon-petr'
AutoGluon will save models to 'autogluon-petr'
AutoGluon will save models to 'autogluon-petr'
AutoGluon will save models to 'autogluon-petr'
AutoGluon will save models to 'autogluon-petr'
=================== System Info ===================
AutoGluon Version:  1.1.1
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.22635
CPU Count:          16
GPU Count:          0
Memory Avail:       15.79 GB / 31.74 GB (49.7%)
Disk Space Avail:   217.59 GB / 930.09 GB (23.4%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.1.1
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.22635
CPU Count:          16
GPU Count:          0
Memory Avail:       15.79 GB / 31.74 GB (49.7%)
Disk Space Avail:   217.59 GB / 930.09 GB (23.4%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.1.1
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.22635
CPU Count:          16
GPU Count:          0
Memory Avail:       15.79 GB / 31.74 GB (49.7%)
Disk Space Avail:   217.59 GB / 930.09 GB (23.4%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.1.1
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.22635
CPU Count:          16
GPU Count:          0
Memory Avail:       15.79 GB / 31.74 GB (49.7%)
Disk Space Avail:   217.59 GB / 930.09 GB (23.4%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.1.1
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.22635
CPU Count:          16
GPU Count:          0
Memory Avail:       15.79 GB / 31.74 GB (49.7%)
Disk Space Avail:   217.59 GB / 930.09 GB (23.4%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.1.1
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.22635
CPU Count:          16
GPU Count:          0
Memory Avail:       15.79 GB / 31.74 GB (49.7%)
Disk Space Avail:   217.59 GB / 930.09 GB (23.4%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.1.1
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.22635
CPU Count:          16
GPU Count:          0
Memory Avail:       15.79 GB / 31.74 GB (49.7%)
Disk Space Avail:   217.59 GB / 930.09 GB (23.4%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.1.1
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.22635
CPU Count:          16
GPU Count:          0
Memory Avail:       15.79 GB / 31.74 GB (49.7%)
Disk Space Avail:   217.59 GB / 930.09 GB (23.4%)
===================================================
Setting presets to: chronos_large_ensemble
Setting presets to: chronos_large_ensemble
Setting presets to: chronos_large_ensemble
Setting presets to: chronos_large_ensemble
Setting presets to: chronos_large_ensemble
Setting presets to: chronos_large_ensemble
Setting presets to: chronos_large_ensemble
Setting presets to: chronos_large_ensemble

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:
{'enable_ensemble': True,
 'eval_metric': MASE,
 'hyperparameters': {'Chronos': {'batch_size': 8, 'model_path': 'large'},
                     'DirectTabular': {},
                     'PatchTST': {},
                     'RecursiveTabular': {},
                     'SeasonalNaive': {},
                     'TemporalFusionTransformer': {}},
 'known_covariates_names': [],
 'num_val_windows': 5,
 'prediction_length': 550,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'VALUE (US$)',
 'time_limit': 600,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': MASE,
 'hyperparameters': {'Chronos': {'batch_size': 8, 'model_path': 'large'},
                     'DirectTabular': {},
                     'PatchTST': {},
                     'RecursiveTabular': {},
                     'SeasonalNaive': {},
                     'TemporalFusionTransformer': {}},
 'known_covariates_names': [],
 'num_val_windows': 5,
 'prediction_length': 550,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'VALUE (US$)',
 'time_limit': 600,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': MASE,
 'hyperparameters': {'Chronos': {'batch_size': 8, 'model_path': 'large'},
                     'DirectTabular': {},
                     'PatchTST': {},
                     'RecursiveTabular': {},
                     'SeasonalNaive': {},
                     'TemporalFusionTransformer': {}},
 'known_covariates_names': [],
 'num_val_windows': 5,
 'prediction_length': 550,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'VALUE (US$)',
 'time_limit': 600,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': MASE,
 'hyperparameters': {'Chronos': {'batch_size': 8, 'model_path': 'large'},
                     'DirectTabular': {},
                     'PatchTST': {},
                     'RecursiveTabular': {},
                     'SeasonalNaive': {},
                     'TemporalFusionTransformer': {}},
 'known_covariates_names': [],
 'num_val_windows': 5,
 'prediction_length': 550,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'VALUE (US$)',
 'time_limit': 600,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': MASE,
 'hyperparameters': {'Chronos': {'batch_size': 8, 'model_path': 'large'},
                     'DirectTabular': {},
                     'PatchTST': {},
                     'RecursiveTabular': {},
                     'SeasonalNaive': {},
                     'TemporalFusionTransformer': {}},
 'known_covariates_names': [],
 'num_val_windows': 5,
 'prediction_length': 550,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'VALUE (US$)',
 'time_limit': 600,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': MASE,
 'hyperparameters': {'Chronos': {'batch_size': 8, 'model_path': 'large'},
                     'DirectTabular': {},
                     'PatchTST': {},
                     'RecursiveTabular': {},
                     'SeasonalNaive': {},
                     'TemporalFusionTransformer': {}},
 'known_covariates_names': [],
 'num_val_windows': 5,
 'prediction_length': 550,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'VALUE (US$)',
 'time_limit': 600,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': MASE,
 'hyperparameters': {'Chronos': {'batch_size': 8, 'model_path': 'large'},
                     'DirectTabular': {},
                     'PatchTST': {},
                     'RecursiveTabular': {},
                     'SeasonalNaive': {},
                     'TemporalFusionTransformer': {}},
 'known_covariates_names': [],
 'num_val_windows': 5,
 'prediction_length': 550,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'VALUE (US$)',
 'time_limit': 600,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': MASE,
 'hyperparameters': {'Chronos': {'batch_size': 8, 'model_path': 'large'},
                     'DirectTabular': {},
                     'PatchTST': {},
                     'RecursiveTabular': {},
                     'SeasonalNaive': {},
                     'TemporalFusionTransformer': {}},
 'known_covariates_names': [],
 'num_val_windows': 5,
 'prediction_length': 550,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'VALUE (US$)',
 'time_limit': 600,
 'verbosity': 2}

Inferred time series frequency: 'D'
Inferred time series frequency: 'D'
Inferred time series frequency: 'D'
Inferred time series frequency: 'D'
Inferred time series frequency: 'D'
Inferred time series frequency: 'D'
Inferred time series frequency: 'D'
Inferred time series frequency: 'D'
Provided train_data has 8012 rows, 1 time series. Median time series length is 8012 (min=8012, max=8012). 
Provided train_data has 8012 rows, 1 time series. Median time series length is 8012 (min=8012, max=8012). 
Provided train_data has 8012 rows, 1 time series. Median time series length is 8012 (min=8012, max=8012). 
Provided train_data has 8012 rows, 1 time series. Median time series length is 8012 (min=8012, max=8012). 
Provided train_data has 8012 rows, 1 time series. Median time series length is 8012 (min=8012, max=8012). 
Provided train_data has 8012 rows, 1 time series. Median time series length is 8012 (min=8012, max=8012). 
Provided train_data has 8012 rows, 1 time series. Median time series length is 8012 (min=8012, max=8012). 
Provided train_data has 8012 rows, 1 time series. Median time series length is 8012 (min=8012, max=8012). 

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:
	target: 'VALUE (US$)'
	target: 'VALUE (US$)'
	target: 'VALUE (US$)'
	target: 'VALUE (US$)'
	target: 'VALUE (US$)'
	target: 'VALUE (US$)'
	target: 'VALUE (US$)'
	target: 'VALUE (US$)'

AutoGluon will gauge predictive performance using evaluation metric: 'MASE'

AutoGluon will gauge predictive performance using evaluation metric: 'MASE'

AutoGluon will gauge predictive performance using evaluation metric: 'MASE'

AutoGluon will gauge predictive performance using evaluation metric: 'MASE'

AutoGluon will gauge predictive performance using evaluation metric: 'MASE'

AutoGluon will gauge predictive performance using evaluation metric: 'MASE'

AutoGluon will gauge predictive performance using evaluation metric: 'MASE'

AutoGluon will gauge predictive performance using evaluation metric: 'MASE'
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================

Starting training. Start time is 2024-06-29 20:27:44

Starting training. Start time is 2024-06-29 20:27:44

Starting training. Start time is 2024-06-29 20:27:44

Starting training. Start time is 2024-06-29 20:27:44

Starting training. Start time is 2024-06-29 20:27:44

Starting training. Start time is 2024-06-29 20:27:44

Starting training. Start time is 2024-06-29 20:27:44

Starting training. Start time is 2024-06-29 20:27:44
Models that will be trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'Chronos[large]', 'TemporalFusionTransformer', 'PatchTST']
Models that will be trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'Chronos[large]', 'TemporalFusionTransformer', 'PatchTST']
Models that will be trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'Chronos[large]', 'TemporalFusionTransformer', 'PatchTST']
Models that will be trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'Chronos[large]', 'TemporalFusionTransformer', 'PatchTST']
Models that will be trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'Chronos[large]', 'TemporalFusionTransformer', 'PatchTST']
Models that will be trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'Chronos[large]', 'TemporalFusionTransformer', 'PatchTST']
Models that will be trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'Chronos[large]', 'TemporalFusionTransformer', 'PatchTST']
Models that will be trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'Chronos[large]', 'TemporalFusionTransformer', 'PatchTST']
Training timeseries model SeasonalNaive. Training for up to 85.7s of the 600.0s of remaining time.
Training timeseries model SeasonalNaive. Training for up to 85.7s of the 600.0s of remaining time.
Training timeseries model SeasonalNaive. Training for up to 85.7s of the 600.0s of remaining time.
Training timeseries model SeasonalNaive. Training for up to 85.7s of the 600.0s of remaining time.
Training timeseries model SeasonalNaive. Training for up to 85.7s of the 600.0s of remaining time.
Training timeseries model SeasonalNaive. Training for up to 85.7s of the 600.0s of remaining time.
Training timeseries model SeasonalNaive. Training for up to 85.7s of the 600.0s of remaining time.
Training timeseries model SeasonalNaive. Training for up to 85.7s of the 600.0s of remaining time.
	-6.9273       = Validation score (-MASE)
	-6.9273       = Validation score (-MASE)
	-6.9273       = Validation score (-MASE)
	-6.9273       = Validation score (-MASE)
	-6.9273       = Validation score (-MASE)
	-6.9273       = Validation score (-MASE)
	-6.9273       = Validation score (-MASE)
	-6.9273       = Validation score (-MASE)
	10.34   s     = Training runtime
	10.34   s     = Training runtime
	10.34   s     = Training runtime
	10.34   s     = Training runtime
	10.34   s     = Training runtime
	10.34   s     = Training runtime
	10.34   s     = Training runtime
	10.34   s     = Training runtime
	2.34    s     = Validation (prediction) runtime
	2.34    s     = Validation (prediction) runtime
	2.34    s     = Validation (prediction) runtime
	2.34    s     = Validation (prediction) runtime
	2.34    s     = Validation (prediction) runtime
	2.34    s     = Validation (prediction) runtime
	2.34    s     = Validation (prediction) runtime
	2.34    s     = Validation (prediction) runtime
Training timeseries model RecursiveTabular. Training for up to 97.9s of the 587.3s of remaining time.
Training timeseries model RecursiveTabular. Training for up to 97.9s of the 587.3s of remaining time.
Training timeseries model RecursiveTabular. Training for up to 97.9s of the 587.3s of remaining time.
Training timeseries model RecursiveTabular. Training for up to 97.9s of the 587.3s of remaining time.
Training timeseries model RecursiveTabular. Training for up to 97.9s of the 587.3s of remaining time.
Training timeseries model RecursiveTabular. Training for up to 97.9s of the 587.3s of remaining time.
Training timeseries model RecursiveTabular. Training for up to 97.9s of the 587.3s of remaining time.
Training timeseries model RecursiveTabular. Training for up to 97.9s of the 587.3s of remaining time.
	-8.1683       = Validation score (-MASE)
	-8.1683       = Validation score (-MASE)
	-8.1683       = Validation score (-MASE)
	-8.1683       = Validation score (-MASE)
	-8.1683       = Validation score (-MASE)
	-8.1683       = Validation score (-MASE)
	-8.1683       = Validation score (-MASE)
	-8.1683       = Validation score (-MASE)
	43.25   s     = Training runtime
	43.25   s     = Training runtime
	43.25   s     = Training runtime
	43.25   s     = Training runtime
	43.25   s     = Training runtime
	43.25   s     = Training runtime
	43.25   s     = Training runtime
	43.25   s     = Training runtime
	7.07    s     = Validation (prediction) runtime
	7.07    s     = Validation (prediction) runtime
	7.07    s     = Validation (prediction) runtime
	7.07    s     = Validation (prediction) runtime
	7.07    s     = Validation (prediction) runtime
	7.07    s     = Validation (prediction) runtime
	7.07    s     = Validation (prediction) runtime
	7.07    s     = Validation (prediction) runtime
Training timeseries model DirectTabular. Training for up to 107.4s of the 536.9s of remaining time.
Training timeseries model DirectTabular. Training for up to 107.4s of the 536.9s of remaining time.
Training timeseries model DirectTabular. Training for up to 107.4s of the 536.9s of remaining time.
Training timeseries model DirectTabular. Training for up to 107.4s of the 536.9s of remaining time.
Training timeseries model DirectTabular. Training for up to 107.4s of the 536.9s of remaining time.
Training timeseries model DirectTabular. Training for up to 107.4s of the 536.9s of remaining time.
Training timeseries model DirectTabular. Training for up to 107.4s of the 536.9s of remaining time.
Training timeseries model DirectTabular. Training for up to 107.4s of the 536.9s of remaining time.
	-10.0551      = Validation score (-MASE)
	-10.0551      = Validation score (-MASE)
	-10.0551      = Validation score (-MASE)
	-10.0551      = Validation score (-MASE)
	-10.0551      = Validation score (-MASE)
	-10.0551      = Validation score (-MASE)
	-10.0551      = Validation score (-MASE)
	-10.0551      = Validation score (-MASE)
	8.60    s     = Training runtime
	8.60    s     = Training runtime
	8.60    s     = Training runtime
	8.60    s     = Training runtime
	8.60    s     = Training runtime
	8.60    s     = Training runtime
	8.60    s     = Training runtime
	8.60    s     = Training runtime
	0.15    s     = Validation (prediction) runtime
	0.15    s     = Validation (prediction) runtime
	0.15    s     = Validation (prediction) runtime
	0.15    s     = Validation (prediction) runtime
	0.15    s     = Validation (prediction) runtime
	0.15    s     = Validation (prediction) runtime
	0.15    s     = Validation (prediction) runtime
	0.15    s     = Validation (prediction) runtime
Training timeseries model Chronos[large]. Training for up to 132.0s of the 528.2s of remaining time.
Training timeseries model Chronos[large]. Training for up to 132.0s of the 528.2s of remaining time.
Training timeseries model Chronos[large]. Training for up to 132.0s of the 528.2s of remaining time.
Training timeseries model Chronos[large]. Training for up to 132.0s of the 528.2s of remaining time.
Training timeseries model Chronos[large]. Training for up to 132.0s of the 528.2s of remaining time.
Training timeseries model Chronos[large]. Training for up to 132.0s of the 528.2s of remaining time.
Training timeseries model Chronos[large]. Training for up to 132.0s of the 528.2s of remaining time.
Training timeseries model Chronos[large]. Training for up to 132.0s of the 528.2s of remaining time.
	Warning: Exception caused Chronos[large] to fail during training... Skipping this model.
	Warning: Exception caused Chronos[large] to fail during training... Skipping this model.
	Warning: Exception caused Chronos[large] to fail during training... Skipping this model.
	Warning: Exception caused Chronos[large] to fail during training... Skipping this model.
	Warning: Exception caused Chronos[large] to fail during training... Skipping this model.
	Warning: Exception caused Chronos[large] to fail during training... Skipping this model.
	Warning: Exception caused Chronos[large] to fail during training... Skipping this model.
	Warning: Exception caused Chronos[large] to fail during training... Skipping this model.
	Chronos[large]\W0 requires a GPU to run, but no GPU was detected. Please make sure that you are using a computer with a CUDA-compatible GPU and `import torch; torch.cuda.is_available()` returns `True`.
	Chronos[large]\W0 requires a GPU to run, but no GPU was detected. Please make sure that you are using a computer with a CUDA-compatible GPU and `import torch; torch.cuda.is_available()` returns `True`.
	Chronos[large]\W0 requires a GPU to run, but no GPU was detected. Please make sure that you are using a computer with a CUDA-compatible GPU and `import torch; torch.cuda.is_available()` returns `True`.
	Chronos[large]\W0 requires a GPU to run, but no GPU was detected. Please make sure that you are using a computer with a CUDA-compatible GPU and `import torch; torch.cuda.is_available()` returns `True`.
	Chronos[large]\W0 requires a GPU to run, but no GPU was detected. Please make sure that you are using a computer with a CUDA-compatible GPU and `import torch; torch.cuda.is_available()` returns `True`.
	Chronos[large]\W0 requires a GPU to run, but no GPU was detected. Please make sure that you are using a computer with a CUDA-compatible GPU and `import torch; torch.cuda.is_available()` returns `True`.
	Chronos[large]\W0 requires a GPU to run, but no GPU was detected. Please make sure that you are using a computer with a CUDA-compatible GPU and `import torch; torch.cuda.is_available()` returns `True`.
	Chronos[large]\W0 requires a GPU to run, but no GPU was detected. Please make sure that you are using a computer with a CUDA-compatible GPU and `import torch; torch.cuda.is_available()` returns `True`.
Training timeseries model TemporalFusionTransformer. Training for up to 176.0s of the 528.1s of remaining time.
Training timeseries model TemporalFusionTransformer. Training for up to 176.0s of the 528.1s of remaining time.
Training timeseries model TemporalFusionTransformer. Training for up to 176.0s of the 528.1s of remaining time.
Training timeseries model TemporalFusionTransformer. Training for up to 176.0s of the 528.1s of remaining time.
Training timeseries model TemporalFusionTransformer. Training for up to 176.0s of the 528.1s of remaining time.
Training timeseries model TemporalFusionTransformer. Training for up to 176.0s of the 528.1s of remaining time.
Training timeseries model TemporalFusionTransformer. Training for up to 176.0s of the 528.1s of remaining time.
Training timeseries model TemporalFusionTransformer. Training for up to 176.0s of the 528.1s of remaining time.
	-11.5140      = Validation score (-MASE)
	-11.5140      = Validation score (-MASE)
	-11.5140      = Validation score (-MASE)
	-11.5140      = Validation score (-MASE)
	-11.5140      = Validation score (-MASE)
	-11.5140      = Validation score (-MASE)
	-11.5140      = Validation score (-MASE)
	-11.5140      = Validation score (-MASE)
	175.40  s     = Training runtime
	175.40  s     = Training runtime
	175.40  s     = Training runtime
	175.40  s     = Training runtime
	175.40  s     = Training runtime
	175.40  s     = Training runtime
	175.40  s     = Training runtime
	175.40  s     = Training runtime
	0.13    s     = Validation (prediction) runtime
	0.13    s     = Validation (prediction) runtime
	0.13    s     = Validation (prediction) runtime
	0.13    s     = Validation (prediction) runtime
	0.13    s     = Validation (prediction) runtime
	0.13    s     = Validation (prediction) runtime
	0.13    s     = Validation (prediction) runtime
	0.13    s     = Validation (prediction) runtime
Training timeseries model PatchTST. Training for up to 176.3s of the 352.6s of remaining time.
Training timeseries model PatchTST. Training for up to 176.3s of the 352.6s of remaining time.
Training timeseries model PatchTST. Training for up to 176.3s of the 352.6s of remaining time.
Training timeseries model PatchTST. Training for up to 176.3s of the 352.6s of remaining time.
Training timeseries model PatchTST. Training for up to 176.3s of the 352.6s of remaining time.
Training timeseries model PatchTST. Training for up to 176.3s of the 352.6s of remaining time.
Training timeseries model PatchTST. Training for up to 176.3s of the 352.6s of remaining time.
Training timeseries model PatchTST. Training for up to 176.3s of the 352.6s of remaining time.
	-6.3972       = Validation score (-MASE)
	-6.3972       = Validation score (-MASE)
	-6.3972       = Validation score (-MASE)
	-6.3972       = Validation score (-MASE)
	-6.3972       = Validation score (-MASE)
	-6.3972       = Validation score (-MASE)
	-6.3972       = Validation score (-MASE)
	-6.3972       = Validation score (-MASE)
	172.67  s     = Training runtime
	172.67  s     = Training runtime
	172.67  s     = Training runtime
	172.67  s     = Training runtime
	172.67  s     = Training runtime
	172.67  s     = Training runtime
	172.67  s     = Training runtime
	172.67  s     = Training runtime
	0.11    s     = Validation (prediction) runtime
	0.11    s     = Validation (prediction) runtime
	0.11    s     = Validation (prediction) runtime
	0.11    s     = Validation (prediction) runtime
	0.11    s     = Validation (prediction) runtime
	0.11    s     = Validation (prediction) runtime
	0.11    s     = Validation (prediction) runtime
	0.11    s     = Validation (prediction) runtime
Fitting simple weighted ensemble.
Fitting simple weighted ensemble.
Fitting simple weighted ensemble.
Fitting simple weighted ensemble.
Fitting simple weighted ensemble.
Fitting simple weighted ensemble.
Fitting simple weighted ensemble.
Fitting simple weighted ensemble.
	Ensemble weights: {'PatchTST': 1.0}
	Ensemble weights: {'PatchTST': 1.0}
	Ensemble weights: {'PatchTST': 1.0}
	Ensemble weights: {'PatchTST': 1.0}
	Ensemble weights: {'PatchTST': 1.0}
	Ensemble weights: {'PatchTST': 1.0}
	Ensemble weights: {'PatchTST': 1.0}
	Ensemble weights: {'PatchTST': 1.0}
	-6.3972       = Validation score (-MASE)
	-6.3972       = Validation score (-MASE)
	-6.3972       = Validation score (-MASE)
	-6.3972       = Validation score (-MASE)
	-6.3972       = Validation score (-MASE)
	-6.3972       = Validation score (-MASE)
	-6.3972       = Validation score (-MASE)
	-6.3972       = Validation score (-MASE)
	1.82    s     = Training runtime
	1.82    s     = Training runtime
	1.82    s     = Training runtime
	1.82    s     = Training runtime
	1.82    s     = Training runtime
	1.82    s     = Training runtime
	1.82    s     = Training runtime
	1.82    s     = Training runtime
	0.11    s     = Validation (prediction) runtime
	0.11    s     = Validation (prediction) runtime
	0.11    s     = Validation (prediction) runtime
	0.11    s     = Validation (prediction) runtime
	0.11    s     = Validation (prediction) runtime
	0.11    s     = Validation (prediction) runtime
	0.11    s     = Validation (prediction) runtime
	0.11    s     = Validation (prediction) runtime
Training complete. Models trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'TemporalFusionTransformer', 'PatchTST', 'WeightedEnsemble']
Training complete. Models trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'TemporalFusionTransformer', 'PatchTST', 'WeightedEnsemble']
Training complete. Models trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'TemporalFusionTransformer', 'PatchTST', 'WeightedEnsemble']
Training complete. Models trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'TemporalFusionTransformer', 'PatchTST', 'WeightedEnsemble']
Training complete. Models trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'TemporalFusionTransformer', 'PatchTST', 'WeightedEnsemble']
Training complete. Models trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'TemporalFusionTransformer', 'PatchTST', 'WeightedEnsemble']
Training complete. Models trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'TemporalFusionTransformer', 'PatchTST', 'WeightedEnsemble']
Training complete. Models trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'TemporalFusionTransformer', 'PatchTST', 'WeightedEnsemble']
Total runtime: 422.17 s
Total runtime: 422.17 s
Total runtime: 422.17 s
Total runtime: 422.17 s
Total runtime: 422.17 s
Total runtime: 422.17 s
Total runtime: 422.17 s
Total runtime: 422.17 s
Best model: PatchTST
Best model: PatchTST
Best model: PatchTST
Best model: PatchTST
Best model: PatchTST
Best model: PatchTST
Best model: PatchTST
Best model: PatchTST
Best model score: -6.3972
Best model score: -6.3972
Best model score: -6.3972
Best model score: -6.3972
Best model score: -6.3972
Best model score: -6.3972
Best model score: -6.3972
Best model score: -6.3972
Model not specified in predict, will default to the model with the best validation score: PatchTST
Model not specified in predict, will default to the model with the best validation score: PatchTST
Model not specified in predict, will default to the model with the best validation score: PatchTST
Model not specified in predict, will default to the model with the best validation score: PatchTST
Model not specified in predict, will default to the model with the best validation score: PatchTST
Model not specified in predict, will default to the model with the best validation score: PatchTST
Model not specified in predict, will default to the model with the best validation score: PatchTST
Model not specified in predict, will default to the model with the best validation score: PatchTST
Additional data provided, testing on additional data. Resulting leaderboard will be sorted according to test score (`score_test`).
Additional data provided, testing on additional data. Resulting leaderboard will be sorted according to test score (`score_test`).
Additional data provided, testing on additional data. Resulting leaderboard will be sorted according to test score (`score_test`).
Additional data provided, testing on additional data. Resulting leaderboard will be sorted according to test score (`score_test`).
Additional data provided, testing on additional data. Resulting leaderboard will be sorted according to test score (`score_test`).
Additional data provided, testing on additional data. Resulting leaderboard will be sorted according to test score (`score_test`).
Additional data provided, testing on additional data. Resulting leaderboard will be sorted according to test score (`score_test`).
Additional data provided, testing on additional data. Resulting leaderboard will be sorted according to test score (`score_test`).
Loading predictor from path autogluon-petr
Loading predictor from path autogluon-petr
Loading predictor from path autogluon-petr
Loading predictor from path autogluon-petr
Loading predictor from path autogluon-petr
Loading predictor from path autogluon-petr
Loading predictor from path autogluon-petr
Loading predictor from path autogluon-petr
Model not specified in predict, will default to the model with the best validation score: PatchTST
Model not specified in predict, will default to the model with the best validation score: PatchTST
Model not specified in predict, will default to the model with the best validation score: PatchTST
Model not specified in predict, will default to the model with the best validation score: PatchTST
Model not specified in predict, will default to the model with the best validation score: PatchTST
Model not specified in predict, will default to the model with the best validation score: PatchTST
Model not specified in predict, will default to the model with the best validation score: PatchTST
Model not specified in predict, will default to the model with the best validation score: PatchTST
Model not specified in predict, will default to the model with the best validation score: PatchTST
Model not specified in predict, will default to the model with the best validation score: PatchTST
Model not specified in predict, will default to the model with the best validation score: PatchTST
Model not specified in predict, will default to the model with the best validation score: PatchTST
Model not specified in predict, will default to the model with the best validation score: PatchTST
Model not specified in predict, will default to the model with the best validation score: PatchTST
Model not specified in predict, will default to the model with the best validation score: PatchTST
Model not specified in predict, will default to the model with the best validation score: PatchTST
Beginning AutoGluon training... Time limit = 600s
Beginning AutoGluon training... Time limit = 600s
Beginning AutoGluon training... Time limit = 600s
Beginning AutoGluon training... Time limit = 600s
Beginning AutoGluon training... Time limit = 600s
Beginning AutoGluon training... Time limit = 600s
Beginning AutoGluon training... Time limit = 600s
Beginning AutoGluon training... Time limit = 600s
Beginning AutoGluon training... Time limit = 600s
AutoGluon will save models to 'autogluon-petr'
AutoGluon will save models to 'autogluon-petr'
AutoGluon will save models to 'autogluon-petr'
AutoGluon will save models to 'autogluon-petr'
AutoGluon will save models to 'autogluon-petr'
AutoGluon will save models to 'autogluon-petr'
AutoGluon will save models to 'autogluon-petr'
AutoGluon will save models to 'autogluon-petr'
AutoGluon will save models to 'autogluon-petr'
=================== System Info ===================
AutoGluon Version:  1.1.1
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.22635
CPU Count:          16
GPU Count:          0
Memory Avail:       14.55 GB / 31.74 GB (45.8%)
Disk Space Avail:   217.57 GB / 930.09 GB (23.4%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.1.1
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.22635
CPU Count:          16
GPU Count:          0
Memory Avail:       14.55 GB / 31.74 GB (45.8%)
Disk Space Avail:   217.57 GB / 930.09 GB (23.4%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.1.1
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.22635
CPU Count:          16
GPU Count:          0
Memory Avail:       14.55 GB / 31.74 GB (45.8%)
Disk Space Avail:   217.57 GB / 930.09 GB (23.4%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.1.1
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.22635
CPU Count:          16
GPU Count:          0
Memory Avail:       14.55 GB / 31.74 GB (45.8%)
Disk Space Avail:   217.57 GB / 930.09 GB (23.4%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.1.1
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.22635
CPU Count:          16
GPU Count:          0
Memory Avail:       14.55 GB / 31.74 GB (45.8%)
Disk Space Avail:   217.57 GB / 930.09 GB (23.4%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.1.1
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.22635
CPU Count:          16
GPU Count:          0
Memory Avail:       14.55 GB / 31.74 GB (45.8%)
Disk Space Avail:   217.57 GB / 930.09 GB (23.4%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.1.1
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.22635
CPU Count:          16
GPU Count:          0
Memory Avail:       14.55 GB / 31.74 GB (45.8%)
Disk Space Avail:   217.57 GB / 930.09 GB (23.4%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.1.1
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.22635
CPU Count:          16
GPU Count:          0
Memory Avail:       14.55 GB / 31.74 GB (45.8%)
Disk Space Avail:   217.57 GB / 930.09 GB (23.4%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.1.1
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.22635
CPU Count:          16
GPU Count:          0
Memory Avail:       14.55 GB / 31.74 GB (45.8%)
Disk Space Avail:   217.57 GB / 930.09 GB (23.4%)
===================================================
Setting presets to: chronos_large_ensemble
Setting presets to: chronos_large_ensemble
Setting presets to: chronos_large_ensemble
Setting presets to: chronos_large_ensemble
Setting presets to: chronos_large_ensemble
Setting presets to: chronos_large_ensemble
Setting presets to: chronos_large_ensemble
Setting presets to: chronos_large_ensemble
Setting presets to: chronos_large_ensemble

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:
{'enable_ensemble': True,
 'eval_metric': WQL,
 'hyperparameters': {'Chronos': {'batch_size': 8, 'model_path': 'large'},
                     'DirectTabular': {},
                     'PatchTST': {},
                     'RecursiveTabular': {},
                     'SeasonalNaive': {},
                     'TemporalFusionTransformer': {}},
 'known_covariates_names': [],
 'num_val_windows': 5,
 'prediction_length': 550,
 'quantile_levels': [0.1, 0.5, 0.75, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'VALUE (US$)',
 'time_limit': 600,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'hyperparameters': {'Chronos': {'batch_size': 8, 'model_path': 'large'},
                     'DirectTabular': {},
                     'PatchTST': {},
                     'RecursiveTabular': {},
                     'SeasonalNaive': {},
                     'TemporalFusionTransformer': {}},
 'known_covariates_names': [],
 'num_val_windows': 5,
 'prediction_length': 550,
 'quantile_levels': [0.1, 0.5, 0.75, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'VALUE (US$)',
 'time_limit': 600,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'hyperparameters': {'Chronos': {'batch_size': 8, 'model_path': 'large'},
                     'DirectTabular': {},
                     'PatchTST': {},
                     'RecursiveTabular': {},
                     'SeasonalNaive': {},
                     'TemporalFusionTransformer': {}},
 'known_covariates_names': [],
 'num_val_windows': 5,
 'prediction_length': 550,
 'quantile_levels': [0.1, 0.5, 0.75, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'VALUE (US$)',
 'time_limit': 600,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'hyperparameters': {'Chronos': {'batch_size': 8, 'model_path': 'large'},
                     'DirectTabular': {},
                     'PatchTST': {},
                     'RecursiveTabular': {},
                     'SeasonalNaive': {},
                     'TemporalFusionTransformer': {}},
 'known_covariates_names': [],
 'num_val_windows': 5,
 'prediction_length': 550,
 'quantile_levels': [0.1, 0.5, 0.75, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'VALUE (US$)',
 'time_limit': 600,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'hyperparameters': {'Chronos': {'batch_size': 8, 'model_path': 'large'},
                     'DirectTabular': {},
                     'PatchTST': {},
                     'RecursiveTabular': {},
                     'SeasonalNaive': {},
                     'TemporalFusionTransformer': {}},
 'known_covariates_names': [],
 'num_val_windows': 5,
 'prediction_length': 550,
 'quantile_levels': [0.1, 0.5, 0.75, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'VALUE (US$)',
 'time_limit': 600,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'hyperparameters': {'Chronos': {'batch_size': 8, 'model_path': 'large'},
                     'DirectTabular': {},
                     'PatchTST': {},
                     'RecursiveTabular': {},
                     'SeasonalNaive': {},
                     'TemporalFusionTransformer': {}},
 'known_covariates_names': [],
 'num_val_windows': 5,
 'prediction_length': 550,
 'quantile_levels': [0.1, 0.5, 0.75, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'VALUE (US$)',
 'time_limit': 600,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'hyperparameters': {'Chronos': {'batch_size': 8, 'model_path': 'large'},
                     'DirectTabular': {},
                     'PatchTST': {},
                     'RecursiveTabular': {},
                     'SeasonalNaive': {},
                     'TemporalFusionTransformer': {}},
 'known_covariates_names': [],
 'num_val_windows': 5,
 'prediction_length': 550,
 'quantile_levels': [0.1, 0.5, 0.75, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'VALUE (US$)',
 'time_limit': 600,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'hyperparameters': {'Chronos': {'batch_size': 8, 'model_path': 'large'},
                     'DirectTabular': {},
                     'PatchTST': {},
                     'RecursiveTabular': {},
                     'SeasonalNaive': {},
                     'TemporalFusionTransformer': {}},
 'known_covariates_names': [],
 'num_val_windows': 5,
 'prediction_length': 550,
 'quantile_levels': [0.1, 0.5, 0.75, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'VALUE (US$)',
 'time_limit': 600,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'hyperparameters': {'Chronos': {'batch_size': 8, 'model_path': 'large'},
                     'DirectTabular': {},
                     'PatchTST': {},
                     'RecursiveTabular': {},
                     'SeasonalNaive': {},
                     'TemporalFusionTransformer': {}},
 'known_covariates_names': [],
 'num_val_windows': 5,
 'prediction_length': 550,
 'quantile_levels': [0.1, 0.5, 0.75, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'VALUE (US$)',
 'time_limit': 600,
 'verbosity': 2}

Inferred time series frequency: 'D'
Inferred time series frequency: 'D'
Inferred time series frequency: 'D'
Inferred time series frequency: 'D'
Inferred time series frequency: 'D'
Inferred time series frequency: 'D'
Inferred time series frequency: 'D'
Inferred time series frequency: 'D'
Inferred time series frequency: 'D'
Provided train_data has 8012 rows, 1 time series. Median time series length is 8012 (min=8012, max=8012). 
Provided train_data has 8012 rows, 1 time series. Median time series length is 8012 (min=8012, max=8012). 
Provided train_data has 8012 rows, 1 time series. Median time series length is 8012 (min=8012, max=8012). 
Provided train_data has 8012 rows, 1 time series. Median time series length is 8012 (min=8012, max=8012). 
Provided train_data has 8012 rows, 1 time series. Median time series length is 8012 (min=8012, max=8012). 
Provided train_data has 8012 rows, 1 time series. Median time series length is 8012 (min=8012, max=8012). 
Provided train_data has 8012 rows, 1 time series. Median time series length is 8012 (min=8012, max=8012). 
Provided train_data has 8012 rows, 1 time series. Median time series length is 8012 (min=8012, max=8012). 
Provided train_data has 8012 rows, 1 time series. Median time series length is 8012 (min=8012, max=8012). 

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:
	target: 'VALUE (US$)'
	target: 'VALUE (US$)'
	target: 'VALUE (US$)'
	target: 'VALUE (US$)'
	target: 'VALUE (US$)'
	target: 'VALUE (US$)'
	target: 'VALUE (US$)'
	target: 'VALUE (US$)'
	target: 'VALUE (US$)'

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================

Starting training. Start time is 2024-06-29 20:45:44

Starting training. Start time is 2024-06-29 20:45:44

Starting training. Start time is 2024-06-29 20:45:44

Starting training. Start time is 2024-06-29 20:45:44

Starting training. Start time is 2024-06-29 20:45:44

Starting training. Start time is 2024-06-29 20:45:44

Starting training. Start time is 2024-06-29 20:45:44

Starting training. Start time is 2024-06-29 20:45:44

Starting training. Start time is 2024-06-29 20:45:44
Models that will be trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'Chronos[large]', 'TemporalFusionTransformer', 'PatchTST']
Models that will be trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'Chronos[large]', 'TemporalFusionTransformer', 'PatchTST']
Models that will be trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'Chronos[large]', 'TemporalFusionTransformer', 'PatchTST']
Models that will be trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'Chronos[large]', 'TemporalFusionTransformer', 'PatchTST']
Models that will be trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'Chronos[large]', 'TemporalFusionTransformer', 'PatchTST']
Models that will be trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'Chronos[large]', 'TemporalFusionTransformer', 'PatchTST']
Models that will be trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'Chronos[large]', 'TemporalFusionTransformer', 'PatchTST']
Models that will be trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'Chronos[large]', 'TemporalFusionTransformer', 'PatchTST']
Models that will be trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'Chronos[large]', 'TemporalFusionTransformer', 'PatchTST']
Training timeseries model SeasonalNaive. Training for up to 85.7s of the 600.0s of remaining time.
Training timeseries model SeasonalNaive. Training for up to 85.7s of the 600.0s of remaining time.
Training timeseries model SeasonalNaive. Training for up to 85.7s of the 600.0s of remaining time.
Training timeseries model SeasonalNaive. Training for up to 85.7s of the 600.0s of remaining time.
Training timeseries model SeasonalNaive. Training for up to 85.7s of the 600.0s of remaining time.
Training timeseries model SeasonalNaive. Training for up to 85.7s of the 600.0s of remaining time.
Training timeseries model SeasonalNaive. Training for up to 85.7s of the 600.0s of remaining time.
Training timeseries model SeasonalNaive. Training for up to 85.7s of the 600.0s of remaining time.
Training timeseries model SeasonalNaive. Training for up to 85.7s of the 600.0s of remaining time.
	-0.1740       = Validation score (-WQL)
	-0.1740       = Validation score (-WQL)
	-0.1740       = Validation score (-WQL)
	-0.1740       = Validation score (-WQL)
	-0.1740       = Validation score (-WQL)
	-0.1740       = Validation score (-WQL)
	-0.1740       = Validation score (-WQL)
	-0.1740       = Validation score (-WQL)
	-0.1740       = Validation score (-WQL)
	10.47   s     = Training runtime
	10.47   s     = Training runtime
	10.47   s     = Training runtime
	10.47   s     = Training runtime
	10.47   s     = Training runtime
	10.47   s     = Training runtime
	10.47   s     = Training runtime
	10.47   s     = Training runtime
	10.47   s     = Training runtime
	2.33    s     = Validation (prediction) runtime
	2.33    s     = Validation (prediction) runtime
	2.33    s     = Validation (prediction) runtime
	2.33    s     = Validation (prediction) runtime
	2.33    s     = Validation (prediction) runtime
	2.33    s     = Validation (prediction) runtime
	2.33    s     = Validation (prediction) runtime
	2.33    s     = Validation (prediction) runtime
	2.33    s     = Validation (prediction) runtime
Training timeseries model RecursiveTabular. Training for up to 97.9s of the 587.1s of remaining time.
Training timeseries model RecursiveTabular. Training for up to 97.9s of the 587.1s of remaining time.
Training timeseries model RecursiveTabular. Training for up to 97.9s of the 587.1s of remaining time.
Training timeseries model RecursiveTabular. Training for up to 97.9s of the 587.1s of remaining time.
Training timeseries model RecursiveTabular. Training for up to 97.9s of the 587.1s of remaining time.
Training timeseries model RecursiveTabular. Training for up to 97.9s of the 587.1s of remaining time.
Training timeseries model RecursiveTabular. Training for up to 97.9s of the 587.1s of remaining time.
Training timeseries model RecursiveTabular. Training for up to 97.9s of the 587.1s of remaining time.
Training timeseries model RecursiveTabular. Training for up to 97.9s of the 587.1s of remaining time.
	-0.2131       = Validation score (-WQL)
	-0.2131       = Validation score (-WQL)
	-0.2131       = Validation score (-WQL)
	-0.2131       = Validation score (-WQL)
	-0.2131       = Validation score (-WQL)
	-0.2131       = Validation score (-WQL)
	-0.2131       = Validation score (-WQL)
	-0.2131       = Validation score (-WQL)
	-0.2131       = Validation score (-WQL)
	42.31   s     = Training runtime
	42.31   s     = Training runtime
	42.31   s     = Training runtime
	42.31   s     = Training runtime
	42.31   s     = Training runtime
	42.31   s     = Training runtime
	42.31   s     = Training runtime
	42.31   s     = Training runtime
	42.31   s     = Training runtime
	6.92    s     = Validation (prediction) runtime
	6.92    s     = Validation (prediction) runtime
	6.92    s     = Validation (prediction) runtime
	6.92    s     = Validation (prediction) runtime
	6.92    s     = Validation (prediction) runtime
	6.92    s     = Validation (prediction) runtime
	6.92    s     = Validation (prediction) runtime
	6.92    s     = Validation (prediction) runtime
	6.92    s     = Validation (prediction) runtime
Training timeseries model DirectTabular. Training for up to 107.6s of the 537.9s of remaining time.
Training timeseries model DirectTabular. Training for up to 107.6s of the 537.9s of remaining time.
Training timeseries model DirectTabular. Training for up to 107.6s of the 537.9s of remaining time.
Training timeseries model DirectTabular. Training for up to 107.6s of the 537.9s of remaining time.
Training timeseries model DirectTabular. Training for up to 107.6s of the 537.9s of remaining time.
Training timeseries model DirectTabular. Training for up to 107.6s of the 537.9s of remaining time.
Training timeseries model DirectTabular. Training for up to 107.6s of the 537.9s of remaining time.
Training timeseries model DirectTabular. Training for up to 107.6s of the 537.9s of remaining time.
Training timeseries model DirectTabular. Training for up to 107.6s of the 537.9s of remaining time.
	-0.3147       = Validation score (-WQL)
	-0.3147       = Validation score (-WQL)
	-0.3147       = Validation score (-WQL)
	-0.3147       = Validation score (-WQL)
	-0.3147       = Validation score (-WQL)
	-0.3147       = Validation score (-WQL)
	-0.3147       = Validation score (-WQL)
	-0.3147       = Validation score (-WQL)
	-0.3147       = Validation score (-WQL)
	73.16   s     = Training runtime
	73.16   s     = Training runtime
	73.16   s     = Training runtime
	73.16   s     = Training runtime
	73.16   s     = Training runtime
	73.16   s     = Training runtime
	73.16   s     = Training runtime
	73.16   s     = Training runtime
	73.16   s     = Training runtime
	0.35    s     = Validation (prediction) runtime
	0.35    s     = Validation (prediction) runtime
	0.35    s     = Validation (prediction) runtime
	0.35    s     = Validation (prediction) runtime
	0.35    s     = Validation (prediction) runtime
	0.35    s     = Validation (prediction) runtime
	0.35    s     = Validation (prediction) runtime
	0.35    s     = Validation (prediction) runtime
	0.35    s     = Validation (prediction) runtime
Training timeseries model Chronos[large]. Training for up to 116.1s of the 464.4s of remaining time.
Training timeseries model Chronos[large]. Training for up to 116.1s of the 464.4s of remaining time.
Training timeseries model Chronos[large]. Training for up to 116.1s of the 464.4s of remaining time.
Training timeseries model Chronos[large]. Training for up to 116.1s of the 464.4s of remaining time.
Training timeseries model Chronos[large]. Training for up to 116.1s of the 464.4s of remaining time.
Training timeseries model Chronos[large]. Training for up to 116.1s of the 464.4s of remaining time.
Training timeseries model Chronos[large]. Training for up to 116.1s of the 464.4s of remaining time.
Training timeseries model Chronos[large]. Training for up to 116.1s of the 464.4s of remaining time.
Training timeseries model Chronos[large]. Training for up to 116.1s of the 464.4s of remaining time.
	Warning: Exception caused Chronos[large] to fail during training... Skipping this model.
	Warning: Exception caused Chronos[large] to fail during training... Skipping this model.
	Warning: Exception caused Chronos[large] to fail during training... Skipping this model.
	Warning: Exception caused Chronos[large] to fail during training... Skipping this model.
	Warning: Exception caused Chronos[large] to fail during training... Skipping this model.
	Warning: Exception caused Chronos[large] to fail during training... Skipping this model.
	Warning: Exception caused Chronos[large] to fail during training... Skipping this model.
	Warning: Exception caused Chronos[large] to fail during training... Skipping this model.
	Warning: Exception caused Chronos[large] to fail during training... Skipping this model.
	Chronos[large]\W0 requires a GPU to run, but no GPU was detected. Please make sure that you are using a computer with a CUDA-compatible GPU and `import torch; torch.cuda.is_available()` returns `True`.
	Chronos[large]\W0 requires a GPU to run, but no GPU was detected. Please make sure that you are using a computer with a CUDA-compatible GPU and `import torch; torch.cuda.is_available()` returns `True`.
	Chronos[large]\W0 requires a GPU to run, but no GPU was detected. Please make sure that you are using a computer with a CUDA-compatible GPU and `import torch; torch.cuda.is_available()` returns `True`.
	Chronos[large]\W0 requires a GPU to run, but no GPU was detected. Please make sure that you are using a computer with a CUDA-compatible GPU and `import torch; torch.cuda.is_available()` returns `True`.
	Chronos[large]\W0 requires a GPU to run, but no GPU was detected. Please make sure that you are using a computer with a CUDA-compatible GPU and `import torch; torch.cuda.is_available()` returns `True`.
	Chronos[large]\W0 requires a GPU to run, but no GPU was detected. Please make sure that you are using a computer with a CUDA-compatible GPU and `import torch; torch.cuda.is_available()` returns `True`.
	Chronos[large]\W0 requires a GPU to run, but no GPU was detected. Please make sure that you are using a computer with a CUDA-compatible GPU and `import torch; torch.cuda.is_available()` returns `True`.
	Chronos[large]\W0 requires a GPU to run, but no GPU was detected. Please make sure that you are using a computer with a CUDA-compatible GPU and `import torch; torch.cuda.is_available()` returns `True`.
	Chronos[large]\W0 requires a GPU to run, but no GPU was detected. Please make sure that you are using a computer with a CUDA-compatible GPU and `import torch; torch.cuda.is_available()` returns `True`.
Training timeseries model TemporalFusionTransformer. Training for up to 154.8s of the 464.4s of remaining time.
Training timeseries model TemporalFusionTransformer. Training for up to 154.8s of the 464.4s of remaining time.
Training timeseries model TemporalFusionTransformer. Training for up to 154.8s of the 464.4s of remaining time.
Training timeseries model TemporalFusionTransformer. Training for up to 154.8s of the 464.4s of remaining time.
Training timeseries model TemporalFusionTransformer. Training for up to 154.8s of the 464.4s of remaining time.
Training timeseries model TemporalFusionTransformer. Training for up to 154.8s of the 464.4s of remaining time.
Training timeseries model TemporalFusionTransformer. Training for up to 154.8s of the 464.4s of remaining time.
Training timeseries model TemporalFusionTransformer. Training for up to 154.8s of the 464.4s of remaining time.
Training timeseries model TemporalFusionTransformer. Training for up to 154.8s of the 464.4s of remaining time.
	-0.3402       = Validation score (-WQL)
	-0.3402       = Validation score (-WQL)
	-0.3402       = Validation score (-WQL)
	-0.3402       = Validation score (-WQL)
	-0.3402       = Validation score (-WQL)
	-0.3402       = Validation score (-WQL)
	-0.3402       = Validation score (-WQL)
	-0.3402       = Validation score (-WQL)
	-0.3402       = Validation score (-WQL)
	153.77  s     = Training runtime
	153.77  s     = Training runtime
	153.77  s     = Training runtime
	153.77  s     = Training runtime
	153.77  s     = Training runtime
	153.77  s     = Training runtime
	153.77  s     = Training runtime
	153.77  s     = Training runtime
	153.77  s     = Training runtime
	0.10    s     = Validation (prediction) runtime
	0.10    s     = Validation (prediction) runtime
	0.10    s     = Validation (prediction) runtime
	0.10    s     = Validation (prediction) runtime
	0.10    s     = Validation (prediction) runtime
	0.10    s     = Validation (prediction) runtime
	0.10    s     = Validation (prediction) runtime
	0.10    s     = Validation (prediction) runtime
	0.10    s     = Validation (prediction) runtime
Training timeseries model PatchTST. Training for up to 155.2s of the 310.5s of remaining time.
Training timeseries model PatchTST. Training for up to 155.2s of the 310.5s of remaining time.
Training timeseries model PatchTST. Training for up to 155.2s of the 310.5s of remaining time.
Training timeseries model PatchTST. Training for up to 155.2s of the 310.5s of remaining time.
Training timeseries model PatchTST. Training for up to 155.2s of the 310.5s of remaining time.
Training timeseries model PatchTST. Training for up to 155.2s of the 310.5s of remaining time.
Training timeseries model PatchTST. Training for up to 155.2s of the 310.5s of remaining time.
Training timeseries model PatchTST. Training for up to 155.2s of the 310.5s of remaining time.
Training timeseries model PatchTST. Training for up to 155.2s of the 310.5s of remaining time.
	-0.1690       = Validation score (-WQL)
	-0.1690       = Validation score (-WQL)
	-0.1690       = Validation score (-WQL)
	-0.1690       = Validation score (-WQL)
	-0.1690       = Validation score (-WQL)
	-0.1690       = Validation score (-WQL)
	-0.1690       = Validation score (-WQL)
	-0.1690       = Validation score (-WQL)
	-0.1690       = Validation score (-WQL)
	152.45  s     = Training runtime
	152.45  s     = Training runtime
	152.45  s     = Training runtime
	152.45  s     = Training runtime
	152.45  s     = Training runtime
	152.45  s     = Training runtime
	152.45  s     = Training runtime
	152.45  s     = Training runtime
	152.45  s     = Training runtime
	0.08    s     = Validation (prediction) runtime
	0.08    s     = Validation (prediction) runtime
	0.08    s     = Validation (prediction) runtime
	0.08    s     = Validation (prediction) runtime
	0.08    s     = Validation (prediction) runtime
	0.08    s     = Validation (prediction) runtime
	0.08    s     = Validation (prediction) runtime
	0.08    s     = Validation (prediction) runtime
	0.08    s     = Validation (prediction) runtime
Fitting simple weighted ensemble.
Fitting simple weighted ensemble.
Fitting simple weighted ensemble.
Fitting simple weighted ensemble.
Fitting simple weighted ensemble.
Fitting simple weighted ensemble.
Fitting simple weighted ensemble.
Fitting simple weighted ensemble.
Fitting simple weighted ensemble.
	Ensemble weights: {'PatchTST': 0.71, 'SeasonalNaive': 0.29}
	Ensemble weights: {'PatchTST': 0.71, 'SeasonalNaive': 0.29}
	Ensemble weights: {'PatchTST': 0.71, 'SeasonalNaive': 0.29}
	Ensemble weights: {'PatchTST': 0.71, 'SeasonalNaive': 0.29}
	Ensemble weights: {'PatchTST': 0.71, 'SeasonalNaive': 0.29}
	Ensemble weights: {'PatchTST': 0.71, 'SeasonalNaive': 0.29}
	Ensemble weights: {'PatchTST': 0.71, 'SeasonalNaive': 0.29}
	Ensemble weights: {'PatchTST': 0.71, 'SeasonalNaive': 0.29}
	Ensemble weights: {'PatchTST': 0.71, 'SeasonalNaive': 0.29}
	-0.1681       = Validation score (-WQL)
	-0.1681       = Validation score (-WQL)
	-0.1681       = Validation score (-WQL)
	-0.1681       = Validation score (-WQL)
	-0.1681       = Validation score (-WQL)
	-0.1681       = Validation score (-WQL)
	-0.1681       = Validation score (-WQL)
	-0.1681       = Validation score (-WQL)
	-0.1681       = Validation score (-WQL)
	2.44    s     = Training runtime
	2.44    s     = Training runtime
	2.44    s     = Training runtime
	2.44    s     = Training runtime
	2.44    s     = Training runtime
	2.44    s     = Training runtime
	2.44    s     = Training runtime
	2.44    s     = Training runtime
	2.44    s     = Training runtime
	2.41    s     = Validation (prediction) runtime
	2.41    s     = Validation (prediction) runtime
	2.41    s     = Validation (prediction) runtime
	2.41    s     = Validation (prediction) runtime
	2.41    s     = Validation (prediction) runtime
	2.41    s     = Validation (prediction) runtime
	2.41    s     = Validation (prediction) runtime
	2.41    s     = Validation (prediction) runtime
	2.41    s     = Validation (prediction) runtime
Training complete. Models trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'TemporalFusionTransformer', 'PatchTST', 'WeightedEnsemble']
Training complete. Models trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'TemporalFusionTransformer', 'PatchTST', 'WeightedEnsemble']
Training complete. Models trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'TemporalFusionTransformer', 'PatchTST', 'WeightedEnsemble']
Training complete. Models trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'TemporalFusionTransformer', 'PatchTST', 'WeightedEnsemble']
Training complete. Models trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'TemporalFusionTransformer', 'PatchTST', 'WeightedEnsemble']
Training complete. Models trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'TemporalFusionTransformer', 'PatchTST', 'WeightedEnsemble']
Training complete. Models trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'TemporalFusionTransformer', 'PatchTST', 'WeightedEnsemble']
Training complete. Models trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'TemporalFusionTransformer', 'PatchTST', 'WeightedEnsemble']
Training complete. Models trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'TemporalFusionTransformer', 'PatchTST', 'WeightedEnsemble']
Total runtime: 444.62 s
Total runtime: 444.62 s
Total runtime: 444.62 s
Total runtime: 444.62 s
Total runtime: 444.62 s
Total runtime: 444.62 s
Total runtime: 444.62 s
Total runtime: 444.62 s
Total runtime: 444.62 s
Best model: WeightedEnsemble
Best model: WeightedEnsemble
Best model: WeightedEnsemble
Best model: WeightedEnsemble
Best model: WeightedEnsemble
Best model: WeightedEnsemble
Best model: WeightedEnsemble
Best model: WeightedEnsemble
Best model: WeightedEnsemble
Best model score: -0.1681
Best model score: -0.1681
Best model score: -0.1681
Best model score: -0.1681
Best model score: -0.1681
Best model score: -0.1681
Best model score: -0.1681
Best model score: -0.1681
Best model score: -0.1681
Model not specified in predict, will default to the model with the best validation score: WeightedEnsemble
Model not specified in predict, will default to the model with the best validation score: WeightedEnsemble
Model not specified in predict, will default to the model with the best validation score: WeightedEnsemble
Model not specified in predict, will default to the model with the best validation score: WeightedEnsemble
Model not specified in predict, will default to the model with the best validation score: WeightedEnsemble
Model not specified in predict, will default to the model with the best validation score: WeightedEnsemble
Model not specified in predict, will default to the model with the best validation score: WeightedEnsemble
Model not specified in predict, will default to the model with the best validation score: WeightedEnsemble
Model not specified in predict, will default to the model with the best validation score: WeightedEnsemble
Additional data provided, testing on additional data. Resulting leaderboard will be sorted according to test score (`score_test`).
Additional data provided, testing on additional data. Resulting leaderboard will be sorted according to test score (`score_test`).
Additional data provided, testing on additional data. Resulting leaderboard will be sorted according to test score (`score_test`).
Additional data provided, testing on additional data. Resulting leaderboard will be sorted according to test score (`score_test`).
Additional data provided, testing on additional data. Resulting leaderboard will be sorted according to test score (`score_test`).
Additional data provided, testing on additional data. Resulting leaderboard will be sorted according to test score (`score_test`).
Additional data provided, testing on additional data. Resulting leaderboard will be sorted according to test score (`score_test`).
Additional data provided, testing on additional data. Resulting leaderboard will be sorted according to test score (`score_test`).
Additional data provided, testing on additional data. Resulting leaderboard will be sorted according to test score (`score_test`).
Loading predictor from path autogluon-petr
Loading predictor from path autogluon-petr
Loading predictor from path autogluon-petr
Loading predictor from path autogluon-petr
Loading predictor from path autogluon-petr
Loading predictor from path autogluon-petr
Loading predictor from path autogluon-petr
Loading predictor from path autogluon-petr
Loading predictor from path autogluon-petr
Model not specified in predict, will default to the model with the best validation score: WeightedEnsemble
Model not specified in predict, will default to the model with the best validation score: WeightedEnsemble
Model not specified in predict, will default to the model with the best validation score: WeightedEnsemble
Model not specified in predict, will default to the model with the best validation score: WeightedEnsemble
Model not specified in predict, will default to the model with the best validation score: WeightedEnsemble
Model not specified in predict, will default to the model with the best validation score: WeightedEnsemble
Model not specified in predict, will default to the model with the best validation score: WeightedEnsemble
Model not specified in predict, will default to the model with the best validation score: WeightedEnsemble
Model not specified in predict, will default to the model with the best validation score: WeightedEnsemble
