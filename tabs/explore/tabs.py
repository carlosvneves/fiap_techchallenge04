import streamlit as st
import pandas as pd
import pytimetk as tk
import plotly.express as px
import utils.dash_utils as dash_utils

# load data
petr_brent = st.session_state.petr_brent

def display_tabs():
    # Begin
    st.markdown(
        "<h1 style='text-align: center;'> An√°lise Explorat√≥ria üõ†Ô∏è üîç</h1>",
        unsafe_allow_html=True
    )


    tab1, tab2, tab3 = st.tabs(["S√©rie Temporal - Petr√≥leo Brent", "Componentes da S√©rie Temporal e Anomalias","Rela√ß√£o: Consumo, Produ√ß√£o e Pre√ßo"])

    with tab1:

        display_basic_data()

    with tab2:
        display_decompose_anomalize()

    with tab3:
        display_supply_demand()



def display_basic_data():
        st.markdown("""

        # :chart: Dados B√°sicos
        """)


        # Using "with" notation
        #with st.sidebar:
        st.markdown("### Filtre por datas:")
        col01, col02 = st.columns(2)
        with col01:
            di = st.date_input("Data Inicial", petr_brent.index.min(), format = 'DD/MM/YYYY',
                            min_value=petr_brent.index.min(), max_value=petr_brent.index.max())
        with col02:
            df = st.date_input("Data Final", petr_brent.index.max(), format = 'DD/MM/YYYY',
                            min_value=petr_brent.index.min(), max_value=petr_brent.index.max())


        petr_brent_selected = petr_brent.loc[di:df]


        # calculate descriptive statistics
        df_describe = dash_utils.descriptive_statistics(petr_brent_selected)

        container = st.container(border=True)

        row1 = container.columns(4)
        row2 = container.columns(4)


        i = 0
        for col in row1 + row2:
            col.metric(label= df_describe.loc[i, 'index'], value = format(df_describe.loc[i, 'price'], '.2f'))
            i += 1


        container = st.container(border=True)

        # Original time series chart
        fig = px.line(
            petr_brent_selected.reset_index(),
            x="index",
            y="price",
        )

        fig.update_layout(
            title="Pre√ßos do petroleo Brent",
            xaxis_title="Data",
            yaxis_title="Pre√ßo (US$)",
        )



        with container:
            st.markdown("""
            ### Pre√ßo do Petr√≥leo do tipo Brent em US$

            <p style="text-align: justify">A s√©rie de pre√ßos hist√≥ricos do petr√≥leo do tipo <b>brent</b> foi obtida da base do Ipea, por meio de uma API Python:
            <a href="https://github.com/luanborelli/ipeadatapy">[`ipeadatapy`]</a>. A API permite que os usu√°rios obtenham dados a partir do
            c√≥digo da s√©rie temporal. No caso do petr√≥leo do tipo <b>brent</b>, a s√©rie √© a de c√≥digo <b>EIA366_PBRENT366</b>, que √© de
            periodicidade di√°ria, e com in√≠cio em 2001.
            A s√©rie foi ajustada para n√£o conter valores nulos por meio dos m√©todos <i>interpolate()</i> e <i>bfill()</i> da biblioteca <i>pandas</i>.

            </p>

            """, unsafe_allow_html=True
        )

        container.plotly_chart(fig)


        container = st.container(border=True)

        with container:
            col1, col2 = st.columns(2)
            with col1:
                fig_boxplot = px.box(petr_brent_selected, y="price", title="Boxplot - Pre√ßos do petroleo Brent")
                st.plotly_chart(fig_boxplot)
            with col2:
                fig_hist = px.histogram(petr_brent_selected, x="price", title="Histograma - Pre√ßos do petroleo Brent", opacity=0.65)
                st.plotly_chart(fig_hist)



def display_decompose_anomalize():
        # Seasonal Decomposition
        container = st.container(border=True)

        container.write("""
            ### Decomposi√ß√£o da s√©rie em suas componentes de tend√™ncia, sazonalidade e erro.

            <p style="text-align: justify">
            A decomposi√ß√£o permite verificar qual o tipo de processo gerador da s√©ries temporal e, consequentemente, qual o
            tipo de modelo pode ser mais adequado para compreender a s√©rie e realizar previs√µes.
            No caso, a s√©rie n√£o √© estacion√°ria, logo, <b>dever√° ser realizado um trabalho de tratamento da s√©rie
            para facilitar a constru√ß√£o de um modelo preditivo</b>.
            </p>


        """, unsafe_allow_html=True)

        anomalize_df = tk.anomalize(
            data          = petr_brent.reset_index(),
            date_column   = 'index',
            value_column  = 'price',
            period        = 7,
            iqr_alpha     = 0.05, # using the default
            clean_alpha   = 0.75, # using the default
            clean         = "min_max"
        )

        anomalize_df.rename(columns={'index': 'date'}, inplace=True)

        # st.write(anomalize_df)

        # Plot seasonal decomposition
        container.plotly_chart(
            tk.plot_anomalies_decomp(
            data        = anomalize_df,
            date_column = 'date',
            engine      = 'plotly',
            title       = 'Seasonal Decomposition'
        )
        )


        # Anomalies detection
        container = st.container(border=True)

        with container:
            st.markdown(f"""
            ### Detec√ß√£o de Anomalias

            <p style="text-align: justify">
            A detec√ß√£o de anomalias permite verificar se existem anomalias nos dados de pre√ßos do petr√≥leo do tipo Brent. 
            S√£o identificados diversos valores que podem ser considerados at√≠picos, os quais est√£p marcados em vermelho.
            Os dados an√¥malos podem ent√£o ser tratados e a s√©rie estar√° pronta para se para construir modelos preditivos.
            O pre√ßo do petr√≥leo do tipo Brent possui alta volatilidade, que √© resultante de uma combina√ß√£o complexa de fatores econ√¥micos, 
            geopol√≠ticos, tecnol√≥gicos e ambientais.
            </p>

            <p style="text-align: justify">    
            A m√©dia do per√≠odo de janeiro de 2001 a junho de 2024 √© de US$ 68,06. Pela observa√ß√£o da s√©rie temporal, √© poss√≠vel estabelecer alguma correla√ß√£o entre as anomalias - e 
            desvios expressivos da m√©dia - identificadas e os seguintes eventos:

            - Crise do _Subprime_ (2007-2010): a crise do subprime foi desencadeada em 2007, a partir da quebra de institui√ß√µes de cr√©dito dos Estados Unidos que concediam
            empr√©stimos hipotec√°rios de alto risco, arrastando v√°rios bancos para uma situa√ß√£o de insolv√™ncia e repercutindo fortemente sobre bolsas de valores de todo mundo.
            A crise enfrentou o seu √°pice em 2008, com seus efeitos impactando a economia global at√© 2010;     
            
            - Primavera √Årabe (2010~):  In√≠cio em 2010, que trouxe instabilidade a muitos pa√≠ses produtores de petr√≥leo no Oriente M√©dio e Norte da √Åfrica, 
            influenciando a oferta global de petr√≥leo;
            
            - Colapso do Petr√≥leo (2014 a 2016): A partir de 2014, a revolu√ß√£o do xisto nos Estados Unidos mudou drasticamente a din√¢mica do mercado de petr√≥leo. 
            Com o aumento da produ√ß√£o de petr√≥leo de xisto, a oferta global aumentou significativamente. Inicialmente a OPEP optou por n√£o cortar o volume de produ√ß√£o, 
            o que provocou a queda dos pre√ßos;

            - Pandemia de COVID-19 (2020-2023): Em 31 de dezembro de 2019, a Organiza√ß√£o Mundial da Sa√∫de (OMS) foi alertada sobre v√°rios casos de pneumonia na cidade de Wuhan, 
            prov√≠ncia de Hubei, na Rep√∫blica Popular da China. Em 30 de janeiro de 2020, a OMS declarou que o surto do novo coronav√≠rus constitui uma Emerg√™ncia de Sa√∫de P√∫blica 
            de Import√¢ncia Internacional (ESPII), o mais alto n√≠vel de alerta da Organiza√ß√£o. A partir de mar√ßo 2021, foram autorizadas vacinas, o que levou √† vacina√ß√£o em massa.
            Em 2023 foi anunciado o t√©rmino da situa√ß√£o de emerg√™ncia. Durante o per√≠odo, houve queda na demanda do petr√≥leo, que foi acompanhada por um excesso de oferta;
            
            - Conflito R√∫ssia-Ucr√¢nia (2022~):  A invas√£o Russa foi iniciada em fevereido de 2022. Com o in√≠cio do conflito, houve a imposi√ß√£o de san√ß√µes √† R√∫ssia, que √© um dos
            maiores exportadores de petr√≥leo do mundo. Isto naturalmente causou a redu√ß√£o da oferta global de petr√≥leo. O pre√ßo do petr√≥leo permaneceu consistentemente alto,
            experimentando flutua√ß√µes de curto-prazo.

            </p>

            """, unsafe_allow_html=True
        )


        # Plot anomalies
        container.plotly_chart(
            tk.plot_anomalies(
            data        = anomalize_df,
            date_column = 'date',
            engine      = 'plotly',
            title       = 'Anomalias Detectadas'
        )
        )

        # Plot cleaned anomalies
        container.plotly_chart(
            tk.plot_anomalies_cleaned(
            data        = anomalize_df,
            date_column = 'date',
            engine      = 'plotly',
            title       = 'S√©rie ap√≥s o Processo de "limpeza" de anomalias'
        )
        )

        anomalize_df.to_csv('data/anomalyze_df.csv')



def display_supply_demand():
        st.markdown(f"""
            ### Oferta e demanda

            <p style="text-align: justify">
            <b>Como oferta e demanda podem influenciar o comportamento do pre√ßo do petr√≥leo?</b>

            </p>


        """, unsafe_allow_html= True)
        # reads data from file
        change_ener_consump, fossil_fuel_consump, fossil_fuel, oil_prod_country, oil_share, energy_percapita  = dash_utils.load_exog_data()


        supply_tab, demand_tab, exog_tab = st.tabs(["Produ√ß√£o de petr√≥leo", "Consumo de petr√≥leo","Choques externos e impactos no pre√ßo do petr√≥leo"])

        st.divider()

        with supply_tab:

            st.markdown(f"""
                #### Produ√ß√£o de petr√≥leo no mundo


                <p style="text-align: justify">
                <b>Quanto de petr√≥leo √© produzido no mundo? Quais pa√≠ses mais produzem petr√≥leo?</b>

                No mapa interativo √© poss√≠vel ver a produ√ß√£o de petr√≥leo de cada pa√≠s por ano. A produ√ß√£o foi convertida em terawatt-hora de energia para permitir a melhor compara√ß√£o.
                </p>

            """, unsafe_allow_html=True)

            oil_prod_country_gt_2001 = oil_prod_country.query("Year > 2001")
            oil_prod_country_gt_2001['Code'] = oil_prod_country_gt_2001['Code'].astype(str)
            oil_prod_country_gt_2001 = oil_prod_country_gt_2001.query("Code != 'nan' and Entity != 'World'")


            min_value = oil_prod_country_gt_2001["Oil production (TWh)"].min()
            max_value = oil_prod_country_gt_2001["Oil production (TWh)"].max()

            fig = px.choropleth(
                oil_prod_country_gt_2001,
                locations="Code",
                color="Oil production (TWh)",  # lifeExp is a column of gapminder
                hover_name="Entity",  # column to add to hover information
                animation_frame="Year",
                range_color=(min_value, max_value),
                color_continuous_scale= "Viridis",#px.colors.sequential.Plasma,
            )
            # Update the layout to set the figure size
            fig.update_layout(
                width=800,
                height=600,  # Adjust the width as needed  # Adjust the height as needed
            )
            fig.update_layout(
                legend=dict(yanchor="top", y=0.99, xanchor="left", x=0.01),
                coloraxis_colorbar=dict(
                    orientation="h",  # Define orienta√ß√£o horizontal
                    yanchor="bottom",
                    xanchor="center",
                    x=0.5,
                    y=-0.2,
                ),
            )

            st.plotly_chart(fig)

            st.divider()

            st.markdown(f"""
                #### Produ√ß√£o de petr√≥leo no tempo


                <p style="text-align: justify">
                    <b>Como tem evolu√≠do a produ√ß√£o de petr√≥leo no mundo ao longo desde 2002? </b>

                O gr√°fico interativo permite ver a tend√™ncia de aumento na produ√ß√£o de petr√≥leo dos principais pa√≠ses produtores desde 2002.
                </p>

            """, unsafe_allow_html=True)

            oil_prod_country_gt_2001 = oil_prod_country_gt_2001.query("Entity in ('United States','Saudi Arabia' ,'Iraq', 'United Arab Emirates', 'Norway', 'Oman', \
            'Qatar', 'Russia')")
            fig = px.line(
                oil_prod_country_gt_2001,
                x="Year",
                y="Oil production (TWh)",
                color="Entity",
            )
            # Update the layout to set the figure size
            fig.update_layout(
                width=800, height=600  # Adjust the width as needed  # Adjust the height as needed
            )
            st.plotly_chart(fig)

        with demand_tab:

            st.markdown(f"""
                #### Consumo de combust√≠vel Fossil (TWh)

                <p style="text-align: justify">
                <b>Quanto de petr√≥leo √© consumido no mundo? Quais pa√≠ses mais consomem petr√≥leo?</b>

                No mapa interativo √© poss√≠vel ver o consumo de petr√≥leo de cada pa√≠s por ano. O consumo √© em terawatt-hora de energia para permitir a melhor compara√ß√£o.
                </p>


            """, unsafe_allow_html=True)


            fossil_fuel_gt_2001 = fossil_fuel.query("Year > 2001")

            fossil_fuel_gt_2001['Code'] = fossil_fuel_gt_2001['Code'].astype(str)
            fossil_fuel_gt_2001 = fossil_fuel_gt_2001.query("Code != 'nan' and Entity != 'World'")

            min_value = fossil_fuel_gt_2001["Fossil fuels (TWh)"].min()
            max_value = fossil_fuel_gt_2001["Fossil fuels (TWh)"].max()

            fig = px.choropleth(
                fossil_fuel_gt_2001,
                locations="Code",
                color="Fossil fuels (TWh)",  # lifeExp is a column of gapminder
                hover_name="Entity",  # column to add to hover information
                animation_frame="Year",
                range_color=(min_value, max_value),
                color_continuous_scale="Viridis",
            )
            # Update the layout to set the figure size
            fig.update_layout(
                width=800,
                height=600,  # Adjust the width as needed  # Adjust the height as needed
            )
            fig.update_layout(
                legend=dict(yanchor="top", y=0.99, xanchor="left", x=0.01),
                coloraxis_colorbar=dict(
                    orientation="h",  # Define orienta√ß√£o horizontal
                    yanchor="bottom",
                    xanchor="center",
                    x=0.5,
                    y=-0.2,
                ),
            )

            st.plotly_chart(fig)

            st.divider()

            st.markdown(f"""
                #### Varia√ß√£o anual no Consumo de Energia (%)


                <p style="text-align: justifVy">
                <b>Como tem evolu√≠do o consumo de energia ao longo do tempo?</b>

                O gr√°fico interativo permite ver a varia√ß√£o inter-anual do consumo de enerigia em v√°rios pa√≠ses do mundo desde 2002. 
                </p>

            """, unsafe_allow_html=True)


            change_ener_consump_gt_2001 = change_ener_consump.query("Year > 2001")



            # limits the displayed country names by value
            change_ener_consump_gt_2001['Code'] = change_ener_consump_gt_2001['Code'].astype(str)
            change_ener_consump_gt_2001['Entity'] = change_ener_consump_gt_2001['Entity'].astype(str)
            change_ener_consump_gt_2001 = change_ener_consump_gt_2001.query("Entity in ('United States','Brazil' ,'China', 'Japan', 'Germany', 'United Kingdom', \
                'Canada', 'India', 'France', 'Norway','South Africa') ")
            # change_ener_consump_gt_2001 = change_ener_consump_gt_2001.query("Code == 'nan' and `Annual change in primary energy consumption (%)` > -10")


            fig = px.line(
                change_ener_consump_gt_2001,
                x="Year",
                y="Annual change in primary energy consumption (%)",
                color="Entity",
            )
            # Update the layout to set the figure size
            fig.update_layout(
                width=800, height=600  # Adjust the width as needed  # Adjust the height as needed
            )

            st.plotly_chart(fig)
        with exog_tab:

            st.markdown(f"""
                #### Fatores Ex√≥genos

                <p style="text-align: justify">
                <b>Quais fatores podem influenciar o comportamento do pre√ßo do petr√≥leo?</b>

                </p>
            """, unsafe_allow_html= True)

            # from daily to annual
            anomalize_df = pd.read_csv("data/anomalyze_df.csv")
            price = anomalize_df[["date","observed_clean"]]
            price.rename(columns={"observed_clean":"price"}, inplace=True)
            price['date'] = pd.to_datetime(price['date'])
            price.to_csv("data/price.csv")

            # from daily to annual

            price_y = price.set_index('date').resample("Y").mean()

            # price percent change
            price_y_percent_change = price_y.resample("Y").sum().pct_change() * 100

            # oil production data frame
            df_production = oil_prod_country_gt_2001.reset_index()[
                ["Entity", "Year", "Oil production (TWh)"]
            ].pivot(index="Year", columns="Entity", values="Oil production (TWh)")

            # price data frame
            df_price = price_y.reset_index()
            df_price["Year"] = df_price["date"].dt.year
            df_price = df_price.drop(columns="date", axis=1)
            df_price.set_index("Year", inplace=True)

            # normalize data
            from sklearn.preprocessing import MinMaxScaler
            import plotly.graph_objs as go

            # Normalizing the production data
            scaler = MinMaxScaler()
            normalized_production = df_production.copy()
            normalized_production.iloc[:, 1:] = scaler.fit_transform(
                df_production.iloc[:, 1:].to_numpy()
            )

            # Normalizing the price data
            normalized_price = df_price.copy().reset_index()
            normalized_price.iloc[:, 1:] = scaler.fit_transform(normalized_price.iloc[:, 1:])
            normalized_price.set_index("Year", inplace=True)

            # Create traces for each country's production values
            traces = []
            for country in normalized_production.columns[1:]:  # Exclude the 'Year' column
                trace = go.Scatter(
                    x=normalized_production.index,
                    y=normalized_production[country],
                    mode="lines",
                    name=f"{country} Produ√ß√£o",
                    line=dict(dash="solid"),  # Solid lines for production values
                    opacity=0.45,
                )
                traces.append(trace)

            # Create a trace for the yearly price series, using a secondary y-axis
            trace_price = go.Scatter(
                x=normalized_price.index,
                y=normalized_price["price"],
                mode="lines+markers",
                name="Pre√ßo",
                yaxis="y2",
                line=dict(dash="dot", color="red"),  # Dotted line and red color for price values
            )
            traces.append(trace_price)

            # Create the layout
            layout = go.Layout(
                title="Produ√ß√£o e Pre√ßo anual do Petroleo normalizados",
                xaxis=dict(title="Ano"),
                yaxis=dict(title="Produ√ß√£o normalizada"),
                yaxis2=dict(title="Pre√ßo normalizado", overlaying="y", side="right"),
                legend=dict(orientation="h", yanchor="bottom", y=-0.5, xanchor="right", x=1),
                height= 600,
                width= 800,
            )

            # Combine the traces into a figure
            fig = go.Figure(data=traces, layout=layout)

            # Show the plot
            st.plotly_chart(fig)

            # consumption percent change
            df_consump_pct_change = change_ener_consump_gt_2001[['Year', 'Entity','Annual change in primary energy consumption (%)']].copy()
            df_consump_pct_change.rename(columns={'Annual change in primary energy consumption (%)': 'Percent Change', "Entity": "Type"}, inplace=True)
            df_consump_pct_change.set_index('Year', inplace=True)

            # price percent change
            price_y_percent_change = price_y.resample("Y").sum().pct_change() * 100

            # price data frame
            df_price_pct_change = price_y_percent_change.reset_index()

            df_price_pct_change["Year"] = df_price_pct_change["date"].dt.year
            df_price_pct_change = df_price_pct_change.drop(columns="date", axis=1)

            # prepare the price data frame to concatenate
            df_price_melted = df_price_pct_change.reset_index().melt(
                id_vars=["Year"], var_name="Type", value_vars = "price", value_name="Percent Change",
            )
            df_price_melted.set_index('Year', inplace=True)

            st.divider()

            st.write("## Correla√ß√£o entre Pre√ßo, Consumo e Produ√ß√£o")
            
            df_consump_pct_change.reset_index(inplace=True)
            #transform from long to wide format
            df_consump_pct_change = df_consump_pct_change.pivot(index="Year", columns="Type", values="Percent Change")

            # Create traces for each country's production values
            traces = []
            for country in df_consump_pct_change.columns[1:]:  # Exclude the 'Year' column
                trace = go.Scatter(
                    x=df_consump_pct_change.index,
                    y=df_consump_pct_change[country],
                    mode="lines",
                    name=f"{country} Consumo",
                    line=dict(dash="solid"),  # Solid lines for production values
                    opacity=0.45,
                )
                traces.append(trace)

            # Create a trace for the yearly price series, using a secondary y-axis
            trace_price = go.Scatter(
                x=df_price_pct_change["Year"],
                y=df_price_pct_change["price"],
                mode="lines+markers",
                name="Pre√ßo",
                yaxis="y2",
                line=dict(dash="dot", color="red"),  # Dotted line and red color for price values
            )
            traces.append(trace_price)

            # Create the layout
            layout = go.Layout(
                title="Varia√ß√£o anual do Consumo de Energia e de Pre√ßos do Petr√≥leo do tipo Brent (%)",
                xaxis=dict(title="Ano"),
                yaxis=dict(title="Consumo de energia (%)"),
                yaxis2=dict(title="Varia√ß√£o de pre√ßos (%)", overlaying="y", side="right"),
                legend=dict(orientation="h", yanchor="bottom", y=-0.5, xanchor="right", x=1),
                height= 600,
                width= 800,
            )

            # Combine the traces into a figure
            fig = go.Figure(data=traces, layout=layout)

            st.plotly_chart(fig)

            st.divider()

            df_price_pct_change = df_price_pct_change[['Year', 'price']].set_index('Year')

            # correlation between normalized price and normalized production
            st.markdown("""
            ## Correla√ß√µes
            
            Utilizando a m√°xima de que correla√ß√£o n√£o √© causalidade, especialmente porque em s√©ries temporais ocorrem muitas correla√ß√µes esp√∫rias,
            √© poss√≠vel analisar a correla√ß√£o entre as s√©ries de interesse, de modo que se possa avaliar em que medida suas varia√ß√µes ao longo do
            tempo se relacionam.
                        """)
            corr_matrix = normalized_price.join(normalized_production, lsuffix='_x', rsuffix='_y').corr()
            # Create the heatmap
            fig = px.imshow(
                corr_matrix,
                text_auto=True,
                color_continuous_scale='Inferno',
                title="Correla√ß√£o entre Pre√ßo e Produ√ß√£o normalizados",
                labels=dict(color="Correlation")
            )

            st.plotly_chart(fig)

            # Extract correlations for column 'price'
            correlations_A = corr_matrix['price']

            # Remove the correlation of 'price' with itself
            correlations_A = correlations_A.drop('price')

            # Find the column with the greatest positive correlation value with 'price'
            max_corr_col = correlations_A.idxmax()
            max_corr_value = correlations_A.max()

            st.write(f"""
                A correla√ß√£o mais alta entre pre√ßo e produ√ß√£o foi identificada com o pa√≠s {max_corr_col}, com um valor de {max_corr_value: .2f}.
            """)


            # correlation between normalized price and normalized production
            #st.write('## Correla√ß√£o entre Pre√ßo e Consumo em termos de varia√ß√£o percentual') #
            corr_matrix = df_price_pct_change.join(df_consump_pct_change, lsuffix='_x', rsuffix='_y').corr()

            # Create the heatmap
            fig = px.imshow(
                corr_matrix,
                text_auto=True,
                color_continuous_scale='Inferno',
                title="Correla√ß√£o entre Pre√ßo e Consumo em termos de varia√ß√£o percentual",
                labels=dict(color="Correlation")
            )
            st.plotly_chart(fig)

            # Extract correlations for column 'price'
            correlations_A = corr_matrix['price']

            # Remove the correlation of 'price' with itself
            correlations_A = correlations_A.drop('price')

            # Find the column with the greatest positive correlation value with 'price'
            max_corr_col = correlations_A.idxmax()
            max_corr_value = correlations_A.max()

            st.write(f"""
            A correla√ß√£o mais alta entre pre√ßo e consumo foi identificada com o pa√≠s {max_corr_col}, com um valor de {max_corr_value: .2f}.""")

            st.divider()

            # granger test and stationarity - pre√ßo granger-causa consumo
            # st.write('### Teste de Granger - Produ√ß√£o causa Pre√ßo')
            granger_result_prod = dash_utils.test_series(y=normalized_price, x=normalized_production, direction = 'x-y')

            result = pd.DataFrame(granger_result_prod).applymap(dash_utils.extract_granger_result)
            # drop columns with None values
            result = result.dropna(axis=1, how='all')
            # drop lines with None values
            result = result.dropna(axis=0, how='all')

            st.markdown(f"""
            ### Testes de causalidade do tipo granger

            O teste de causalidade do tipo granger (granger test) pode ser usado para testar se a s√©rie _x_ 
            causa a s√©rie _y_ no sentido granger, ou seja, se a s√©rie x precede a s√©rie y, sendo √∫til para a sua previs√£o.

            O teste revelou que somente no caso do pa√≠s {result.columns[0]} foi identificada uma correla√ß√£o no sentido granger entre 
            produ√ß√£o e pre√ßo em at√© {len(result)} anos. Neste caso, pode-se dizer que a produ√ß√£o ajuda a explicar
            a evolu√ß√£o do pre√ßo no tempo.

            """)
            